const main = require('./main')
Object.defineProperty(exports, "__esModule", { value: true })
// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-nodejs.ts via github.com/metaleap/vscode-appz/src/gen/main.ts
let vsc, appName, strFmt, quit, cancelIn, demo_Window_ShowInputBox
exports.demosMenu = demosMenu
exports.onUpAndRunning = onUpAndRunning
exports.statusNoticeQuit = statusNoticeQuit
exports.onReady = () => { vsc = main.vsc; appName = main.appName; strFmt = main.strFmt; quit = main.quit; cancelIn = main.cancelIn; demo_Window_ShowInputBox = main.demo_Window_ShowInputBox }

function demo_promptToExit() {
    vsc.Window.ShowWarningMessage1(strFmt("Are you sure you want `{0}` to exit?", appName), ["Sure I'm sure"])((btn) => {
        if ((undefined !== btn && null !== btn)) {
            quit(null)
        }
    })
}

function demo_Commands_GetCommands_and_ExecuteCommand() {
    vsc.Commands.GetCommands(false)((items) => {
        let opts
        opts = {}
        opts.ignoreFocusOut = true
        opts.placeHolder = strFmt("Retrieved {0} command ID(s), pick one to execute or escape now:", items.length)
        vsc.Window.ShowQuickPick2(items, opts, null)((item) => {
            if ((undefined === item || null === item)) {
                vsc.Window.ShowWarningMessage1("Command selection cancelled, bye now!", null)(quit)
            } else {
                let opts2
                opts2 = {}
                opts2.ignoreFocusOut = true
                opts2.placeHolder = strFmt("Any param for `{0}` command? Else leave blank.", item)
                vsc.Window.ShowInputBox(opts2, null)((cmdarg) => {
                    if ((undefined === cmdarg || null === cmdarg)) {
                        vsc.Window.ShowWarningMessage1("You cancelled, bye now!", null)(quit)
                    } else {
                        let cmdargs
                        if ("" !== cmdarg) {
                            cmdargs = new Array(1)
                            cmdargs[0] = cmdarg
                        }
                        vsc.Commands.ExecuteCommand(item, cmdargs)((ret) => {
                            vsc.Window.ShowInformationMessage1(strFmt("Command result was: {0}", ret), null)(quit)
                        })
                    }
                })
            }
        })
    })
}

function demo_Commands_RegisterCommand() {
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.value = "foo.bar.baz"
    opts.prompt = "Enter your command name. The command will accept a single text input and return a result built from it."
    vsc.Window.ShowInputBox(opts, null)((cmdname) => {
        if ((undefined === cmdname || null === cmdname)) {
            vsc.Window.ShowWarningMessage1("You cancelled, bye now!", null)(quit)
        } else {
            vsc.Commands.RegisterCommand(cmdname, (cmdargs) => {
                vsc.Window.SetStatusBarMessage1(strFmt("Command `{0}` invoked with: `{1}`", cmdname, cmdargs[0]), 4242)
                return strFmt("Input to command `{0}` was: `{1}`", cmdname, cmdargs[0])
            })((useToUnregister) => {
                let opts2
                opts2 = {}
                opts2.ignoreFocusOut = true
                opts2.prompt = strFmt("Command `{0}` registered, try it now?", cmdname)
                opts2.value = strFmt("Enter input to command `{0}` here", cmdname)
                vsc.Window.ShowInputBox(opts2, null)((cmdarg) => {
                    if ((undefined === cmdarg || null === cmdarg)) {
                        vsc.Window.ShowWarningMessage1("You cancelled, bye now!", null)(quit)
                    } else {
                        let cmdargs2
                        cmdargs2 = new Array(1)
                        cmdargs2[0] = cmdarg
                        vsc.Commands.ExecuteCommand(cmdname, cmdargs2)((ret) => {
                            vsc.Window.ShowInformationMessage1(strFmt("Command result: {0}", ret), null)(quit)
                        })
                    }
                })
            })
        }
    })
}

function demo_Languages_GetLanguages() {
    vsc.Languages.GetLanguages()((items) => {
        let opts
        opts = {}
        opts.ignoreFocusOut = true
        opts.placeHolder = strFmt("Retrieved {0} language ID(s)", items.length)
        vsc.Window.ShowQuickPick2(items, opts, null)(quit)
    })
}

function demo_Env_Properties() {
    vsc.Env.Properties()((props) => {
        let items
        items = new Array(8)
        {
            items[0] = strFmt("appName\t\t\t{0}", props.appName)
            items[1] = strFmt("appRoot\t\t\t{0}", props.appRoot)
            items[2] = strFmt("language\t\t{0}", props.language)
            items[3] = strFmt("machineId\t\t{0}", props.machineId)
            items[4] = strFmt("remoteName\t\t{0}", props.remoteName)
            items[5] = strFmt("sessionId\t\t{0}", props.sessionId)
            items[6] = strFmt("shell\t\t\t{0}", props.shell)
            items[7] = strFmt("uriScheme\t\t{0}", props.uriScheme)
            let opts
            opts = {}
            opts.ignoreFocusOut = true
            opts.placeHolder = strFmt("Env has {0} properties:", items.length)
            vsc.Window.ShowQuickPick2(items, opts, null)(quit)
        }
    })
}

function demo_Workspace_Properties() {
    vsc.Workspace.Properties()((props) => {
        let items
        items = new Array(3)
        {
            items[0] = strFmt("name\t\t\t{0}", props.name)
            items[1] = strFmt("workspaceFile\t\t{0}", props.workspaceFile)
            items[2] = strFmt("workspaceFolders\t{0}", props.workspaceFolders)
            let opts
            opts = {}
            opts.ignoreFocusOut = true
            opts.placeHolder = strFmt("Workspace has {0} properties:", items.length)
            vsc.Window.ShowQuickPick2(items, opts, null)(quit)
        }
    })
}

function demo_Window_ShowOpenDialog() {
    let opts
    opts = {}
    opts.openLabel = "Note: won't actually read from specified file path(s)"
    opts.filters = {}
    opts.filters["All"] = ["*"]
    opts.filters["Dummy Filter"] = ["dummy", "demo"]
    {
        opts.canSelectFiles = true
        opts.canSelectFolders = false
        opts.canSelectMany = true
    }
    vsc.Window.ShowOpenDialog(opts)((filepaths) => {
        statusNoticeQuit()
        if ((undefined === filepaths || null === filepaths)) {
            vsc.Window.ShowWarningMessage1("Cancelled File-Open dialog, bye now!", null)(quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("Selected {0} file path(s), bye now!", filepaths.length), null)(quit)
        }
    })
}

function demo_Window_ShowSaveDialog() {
    let opts
    opts = {}
    opts.saveLabel = "Note: won't actually write to specified file path"
    opts.filters = {}
    opts.filters["All"] = ["*"]
    opts.filters["Dummy Filter"] = ["dummy", "demo"]
    vsc.Window.ShowSaveDialog(opts)((filepath) => {
        statusNoticeQuit()
        if ((undefined === filepath || null === filepath)) {
            vsc.Window.ShowWarningMessage1("Cancelled File-Save dialog, bye now!", null)(quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("Selected file path `{0}`, bye now!", filepath), null)(quit)
        }
    })
}

function demo_Window_ShowWorkspaceFolderPick() {
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.placeHolder = "Reminder, all local-FS-related 'URIs' sent on the VS Code side turn into standard (non-URI) file-path strings received by the prog side."
    vsc.Window.ShowWorkspaceFolderPick(opts)((pickedfolder) => {
        statusNoticeQuit()
        if ((undefined === pickedfolder || null === pickedfolder)) {
            vsc.Window.ShowWarningMessage1("Cancelled pick input, bye now!", null)(quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("Selected `{0}` located at `{1}`, bye now!", pickedfolder.name, pickedfolder.uri), null)(quit)
        }
    })
}

function demo_Env_OpenExternal() {
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.value = "http://foo.bar/baz"
    opts.prompt = "Enter any URI (of http: or mailto: or any other protocol scheme) to open in the applicable external app registered with your OS to handle that protocol."
    vsc.Window.ShowInputBox(opts, null)((uri) => {
        if ((undefined === uri || null === uri)) {
            vsc.Window.ShowWarningMessage1("You cancelled, bye now!", null)(quit)
        } else {
            vsc.Env.OpenExternal(uri)((ok) => {
                let did
                did = "Did"
                if (!ok) {
                    did = did  +  " not"
                }
                vsc.Window.ShowInformationMessage1(strFmt("{0} succeed in opening `{1}`, bye now!", did, uri), null)(quit)
            })
        }
    })
}

function demo_Window_ShowQuickPick() {
    let items
    items = new Array(4)
    items[0] = {}
    items[0].label = "One"
    items[0].description = "The first"
    items[0].detail = "Das erste"
    items[1] = {}
    items[1].label = "Two"
    items[1].description = "The second"
    items[1].detail = "Das zweite"
    items[2] = {}
    items[2].label = "Three"
    items[2].description = "The third"
    items[2].detail = "Das dritte"
    items[3] = {}
    items[3].label = "Four"
    items[3].description = "The fourth"
    items[3].detail = "Das vierte"
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.matchOnDescription = true
    opts.matchOnDetail = true
    opts.placeHolder = "You have 42 seconds before auto-cancellation!"
    opts.onDidSelectItem = (item) => {
        vsc.Window.SetStatusBarMessage1(strFmt("Just selected: {0}", item.label), 4242)
        return null
    }
    vsc.Window.ShowQuickPick3(items, opts, cancelIn(42))((pickeditems) => {
        statusNoticeQuit()
        if ((undefined === pickeditems || null === pickeditems)) {
            vsc.Window.ShowWarningMessage1("Cancelled pick input, bye now!", null)(quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("You picked {0} item(s), bye now!", pickeditems.length), null)(quit)
        }
    })
}

function subscribeToMiscEvents() {
    vsc.Extensions.OnDidChange(() => {
        vsc.Window.SetStatusBarMessage1("Some extension(s) were just (un)installed or (de)activated.", 4242)
    })
    vsc.Window.OnDidChangeWindowState((evt) => {
        vsc.Window.SetStatusBarMessage1(strFmt("Am I focused? {0}.", evt.focused), 4242)
    })
    vsc.Languages.OnDidChangeDiagnostics((evt) => {
        vsc.Window.SetStatusBarMessage1(strFmt("Diag(s) changed for {0} file path(s).", evt.uris.length), 4242)
    })
}

function statusNoticeQuit() {
    vsc.Window.SetStatusBarMessage1("Reacting to the 'bye now' WILL end the prog.", 4242)
}

function demosMenu() {
    let items
    items = ["demo_promptToExit", "demo_Commands_GetCommands_and_ExecuteCommand", "demo_Commands_RegisterCommand", "demo_Languages_GetLanguages", "demo_Env_Properties", "demo_Workspace_Properties", "demo_Window_ShowOpenDialog", "demo_Window_ShowSaveDialog", "demo_Window_ShowWorkspaceFolderPick", "demo_Env_OpenExternal", "demo_Window_ShowQuickPick", "demo_Window_ShowInputBox"]
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.placeHolder = "Dismissing this menu WILL end the prog."
    vsc.Window.ShowQuickPick2(items, opts, null)((menuitem) => {
        if ((undefined === menuitem || null === menuitem)) {
            quit(null)
        } else {
            if ("demo_promptToExit" === menuitem) {
                demo_promptToExit()
            }
            if ("demo_Commands_GetCommands_and_ExecuteCommand" === menuitem) {
                demo_Commands_GetCommands_and_ExecuteCommand()
            }
            if ("demo_Commands_RegisterCommand" === menuitem) {
                demo_Commands_RegisterCommand()
            }
            if ("demo_Languages_GetLanguages" === menuitem) {
                demo_Languages_GetLanguages()
            }
            if ("demo_Env_Properties" === menuitem) {
                demo_Env_Properties()
            }
            if ("demo_Workspace_Properties" === menuitem) {
                demo_Workspace_Properties()
            }
            if ("demo_Window_ShowOpenDialog" === menuitem) {
                demo_Window_ShowOpenDialog()
            }
            if ("demo_Window_ShowSaveDialog" === menuitem) {
                demo_Window_ShowSaveDialog()
            }
            if ("demo_Window_ShowWorkspaceFolderPick" === menuitem) {
                demo_Window_ShowWorkspaceFolderPick()
            }
            if ("demo_Env_OpenExternal" === menuitem) {
                demo_Env_OpenExternal()
            }
            if ("demo_Window_ShowQuickPick" === menuitem) {
                demo_Window_ShowQuickPick()
            }
            if ("demo_Window_ShowInputBox" === menuitem) {
                demo_Window_ShowInputBox()
            }
        }
    })
}

function onUpAndRunning() {
    subscribeToMiscEvents()
    vsc.Window.CreateStatusBarItem(0, null)((it) => {
        it.Get()((props) => {
            props.tooltip = strFmt("Hi from {0}!", appName)
            props.text = "You clicked me 0 time(s)."
            props.color = "editorLightBulb.foreground"
            props.command = "vsc_appz.main"
            it.Set(props)(() => {
                it.Show()
            })
        })
    })
}

