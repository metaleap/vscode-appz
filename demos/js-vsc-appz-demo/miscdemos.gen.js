const main = require('./main')
Object.defineProperty(exports, "__esModule", { value: true })
// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-nodejs.ts via github.com/metaleap/vscode-appz/src/gen/main.ts
let vsc, strFmt, quit, cancelIn
exports.demosMenu = demosMenu
exports.subscribeToMiscEvents = subscribeToMiscEvents
exports.onReady = () => { vsc = main.vsc; strFmt = main.strFmt; quit = main.quit; cancelIn = main.cancelIn; }

function demo_Commands_GetCommands() {
    vsc.Commands.GetCommands(false, (items) => {
        let opts
        opts = {}
        opts.ignoreFocusOut = true
        opts.placeHolder = strFmt("Retrieved {0} command ID(s)", items.length)
        vsc.Window.ShowQuickPick2(items, opts, null, quit)
    })
}

function demo_Languages_GetLanguages() {
    vsc.Languages.GetLanguages((items) => {
        let opts
        opts = {}
        opts.ignoreFocusOut = true
        opts.placeHolder = strFmt("Retrieved {0} language ID(s)", items.length)
        vsc.Window.ShowQuickPick2(items, opts, null, quit)
    })
}

function demo_Env_Properties() {
    vsc.Env.Properties((props) => {
        let items
        items = new Array(8)
        {
            items[0] = strFmt("appName\t\t\t{0}", props.appName)
            items[1] = strFmt("appRoot\t\t\t{0}", props.appRoot)
            items[2] = strFmt("language\t\t{0}", props.language)
            items[3] = strFmt("machineId\t\t{0}", props.machineId)
            items[4] = strFmt("remoteName\t\t{0}", props.remoteName)
            items[5] = strFmt("sessionId\t\t{0}", props.sessionId)
            items[6] = strFmt("shell\t\t\t{0}", props.shell)
            items[7] = strFmt("uriScheme\t\t{0}", props.uriScheme)
            let opts
            opts = {}
            opts.ignoreFocusOut = true
            opts.placeHolder = strFmt("Env has {0} properties:", items.length)
            vsc.Window.ShowQuickPick2(items, opts, null, quit)
        }
    })
}

function demo_Workspace_Properties() {
    vsc.Workspace.Properties((props) => {
        let items
        items = new Array(3)
        {
            items[0] = strFmt("name\t\t\t{0}", props.name)
            items[1] = strFmt("workspaceFile\t\t{0}", props.workspaceFile)
            items[2] = strFmt("workspaceFolders\t{0}", props.workspaceFolders)
            let opts
            opts = {}
            opts.ignoreFocusOut = true
            opts.placeHolder = strFmt("Workspace has {0} properties:", items.length)
            vsc.Window.ShowQuickPick2(items, opts, null, quit)
        }
    })
}

function demo_Window_ShowOpenDialog() {
    let opts
    opts = {}
    opts.openLabel = "Note: won't actually read from specified file path(s)"
    opts.filters = {}
    opts.filters["All"] = ["*"]
    opts.filters["Dummy Filter"] = ["dummy", "demo"]
    {
        opts.canSelectFiles = true
        opts.canSelectFolders = false
        opts.canSelectMany = true
    }
    vsc.Window.ShowOpenDialog(opts, (filepaths) => {
        statusNoticeQuit()
        if ((undefined === filepaths || null === filepaths)) {
            vsc.Window.ShowWarningMessage1("Cancelled File-Open dialog, bye now!", null, quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("Selected {0} file path(s), bye now!", filepaths.length), null, quit)
        }        
    })
}

function demo_Window_ShowSaveDialog() {
    let opts
    opts = {}
    opts.saveLabel = "Note: won't actually write to specified file path"
    opts.filters = {}
    opts.filters["All"] = ["*"]
    opts.filters["Dummy Filter"] = ["dummy", "demo"]
    vsc.Window.ShowSaveDialog(opts, (filepath) => {
        statusNoticeQuit()
        if ((undefined === filepath || null === filepath)) {
            vsc.Window.ShowWarningMessage1("Cancelled File-Save dialog, bye now!", null, quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("Selected file path `{0}`, bye now!", filepath), null, quit)
        }        
    })
}

function demo_Window_ShowWorkspaceFolderPick() {
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.placeHolder = "Reminder, all local-FS-related 'URIs' sent on the VS Code side turn into standard (non-URI) file-path strings received by the prog side."
    vsc.Window.ShowWorkspaceFolderPick(opts, (pickedfolder) => {
        statusNoticeQuit()
        if ((undefined === pickedfolder || null === pickedfolder)) {
            vsc.Window.ShowWarningMessage1("Cancelled pick input, bye now!", null, quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("Selected `{0}` located at `{1}`, bye now!", pickedfolder.name, pickedfolder.uri), null, quit)
        }        
    })
}

function demo_Env_OpenExternal() {
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.value = "http://"
    opts.prompt = "Enter any URI (of http: or mailto: or any other protocol scheme) to open in the applicable external app registered with your OS to handle that protocol."
    vsc.Window.ShowInputBox(opts, null, (uri) => {
        statusNoticeQuit()
        if ((undefined === uri || null === uri)) {
            vsc.Window.ShowWarningMessage1("Cancelled, bye now!", null, quit)
        } else {
            vsc.Env.OpenExternal(uri, (ok) => {
                let did
                did = "Did"
                if (!ok) {
                    did = did  +  " not"
                }
                vsc.Window.ShowInformationMessage1(strFmt("{0} succeed in opening `{1}`, bye now!", did, uri), null, quit)
            })
        }        
    })
}

function demo_Window_ShowQuickPick() {
    let items
    items = new Array(4)
    items[0] = {}
    items[0].label = "One"
    items[0].description = "The first"
    items[0].detail = "Das erste"
    items[1] = {}
    items[1].label = "Two"
    items[1].description = "The second"
    items[1].detail = "Das zweite"
    items[2] = {}
    items[2].label = "Three"
    items[2].description = "The third"
    items[2].detail = "Das dritte"
    items[3] = {}
    items[3].label = "Four"
    items[3].description = "The fourth"
    items[3].detail = "Das vierte"
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.matchOnDescription = true
    opts.matchOnDetail = true
    opts.placeHolder = "You have 42 seconds before auto-cancellation!"
    opts.onDidSelectItem = (item) => {
        vsc.Window.SetStatusBarMessage1(strFmt("Just selected: {0} (picked? {1}.)", item.label, item.picked), 4242, null)
        return null
    }
    vsc.Window.ShowQuickPick3(items, opts, cancelIn(42), (pickeditems) => {
        statusNoticeQuit()
        if ((undefined === pickeditems || null === pickeditems)) {
            vsc.Window.ShowWarningMessage1("Cancelled pick input, bye now!", null, quit)
        } else {
            vsc.Window.ShowInformationMessage1(strFmt("You picked {0} item(s), bye now!", pickeditems.length), null, quit)
        }        
    })
}

function subscribeToMiscEvents() {
    vsc.Extensions.OnDidChange(() => {
        vsc.Window.SetStatusBarMessage1("Some extension(s) were just (un)installed or (de)activated.", 4242, null)
    }, null)
    vsc.Window.OnDidChangeWindowState((evt) => {
        vsc.Window.SetStatusBarMessage1(strFmt("Am I focused? {0}.", evt.focused), 4242, null)
    }, null)
    vsc.Languages.OnDidChangeDiagnostics((evt) => {
        vsc.Window.SetStatusBarMessage1(strFmt("Diag(s) changed for {0} file path(s).", evt.uris.length), 4242, null)
    }, null)
}

function statusNoticeQuit() {
    vsc.Window.SetStatusBarMessage1("Reacting to the 'bye now' WILL end the prog.", 4242, null)
}

function demosMenu() {
    let items
    items = ["demo_Window_ShowInputBox", "demo_Commands_GetCommands", "demo_Languages_GetLanguages", "demo_Env_Properties", "demo_Workspace_Properties", "demo_Window_ShowOpenDialog", "demo_Window_ShowSaveDialog", "demo_Window_ShowWorkspaceFolderPick", "demo_Env_OpenExternal", "demo_Window_ShowQuickPick"]
    let opts
    opts = {}
    opts.ignoreFocusOut = true
    opts.placeHolder = "Dismissing this menu WILL end the prog."
    vsc.Window.ShowQuickPick2(items, opts, null, (menuitem) => {
        if ((undefined === menuitem || null === menuitem)) {
            quit(null)
        } else {
            if ("demo_Window_ShowInputBox" === menuitem) {
                demo_Window_ShowInputBox()
            }
            if ("demo_Commands_GetCommands" === menuitem) {
                demo_Commands_GetCommands()
            }
            if ("demo_Languages_GetLanguages" === menuitem) {
                demo_Languages_GetLanguages()
            }
            if ("demo_Env_Properties" === menuitem) {
                demo_Env_Properties()
            }
            if ("demo_Workspace_Properties" === menuitem) {
                demo_Workspace_Properties()
            }
            if ("demo_Window_ShowOpenDialog" === menuitem) {
                demo_Window_ShowOpenDialog()
            }
            if ("demo_Window_ShowSaveDialog" === menuitem) {
                demo_Window_ShowSaveDialog()
            }
            if ("demo_Window_ShowWorkspaceFolderPick" === menuitem) {
                demo_Window_ShowWorkspaceFolderPick()
            }
            if ("demo_Env_OpenExternal" === menuitem) {
                demo_Env_OpenExternal()
            }
            if ("demo_Window_ShowQuickPick" === menuitem) {
                demo_Window_ShowQuickPick()
            }
        }        
    })
}

