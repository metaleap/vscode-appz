package vscode

// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-golang.ts via github.com/metaleap/vscode-appz/src/gen/main.ts

type Impl interface {
	Window

	MainLoop()
}

type MessageOptions struct {
	Modal bool `json:"modal,omitempty"`
}

type MessageItem struct {
	Title             string      `json:"title"`
	IsCloseAffordance bool        `json:"isCloseAffordance,omitempty"`
	AppzTag           interface{} `json:"appzTag,omitempty"`
}

type InputBoxOptions struct {
	Value          string              `json:"value,omitempty"`
	ValueSelection []int               `json:"valueSelection,omitempty"`
	Prompt         string              `json:"prompt,omitempty"`
	PlaceHolder    string              `json:"placeHolder,omitempty"`
	Password       bool                `json:"password,omitempty"`
	IgnoreFocusOut bool                `json:"ignoreFocusOut,omitempty"`
	ValidateInput  func(string) string `json:"-"`
}

type Window interface {
	ShowErrorMessage1(message string, items []string, andThen func(result string, failure interface{}))
	ShowErrorMessage2(message string, options MessageOptions, items []string, andThen func(result string, failure interface{}))
	ShowErrorMessage3(message string, items []MessageItem, andThen func(result MessageItem, failure interface{}))
	ShowErrorMessage4(message string, options MessageOptions, items []MessageItem, andThen func(result MessageItem, failure interface{}))
	ShowInformationMessage1(message string, items []string, andThen func(result string, failure interface{}))
	ShowInformationMessage2(message string, options MessageOptions, items []string, andThen func(result string, failure interface{}))
	ShowInformationMessage3(message string, items []MessageItem, andThen func(result MessageItem, failure interface{}))
	ShowInformationMessage4(message string, options MessageOptions, items []MessageItem, andThen func(result MessageItem, failure interface{}))
	ShowWarningMessage1(message string, items []string, andThen func(result string, failure interface{}))
	ShowWarningMessage2(message string, options MessageOptions, items []string, andThen func(result string, failure interface{}))
	ShowWarningMessage3(message string, items []MessageItem, andThen func(result MessageItem, failure interface{}))
	ShowWarningMessage4(message string, options MessageOptions, items []MessageItem, andThen func(result MessageItem, failure interface{}))
	ShowInputBox(options *InputBoxOptions, andThen func(result string, failure interface{}))
}

func (me *impl) ShowErrorMessage1(message string, items []string, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showErrorMessage1", Payload: make(map[string]interface{}, 2)}
	msg.Payload["message"] = message
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowErrorMessage2(message string, options MessageOptions, items []string, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showErrorMessage2", Payload: make(map[string]interface{}, 3)}
	msg.Payload["message"] = message
	msg.Payload["options"] = options
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowErrorMessage3(message string, items []MessageItem, andThen func(result MessageItem, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showErrorMessage3", Payload: make(map[string]interface{}, 2)}
	msg.Payload["message"] = message
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result MessageItem
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				ok = result.populateFrom(payload)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowErrorMessage4(message string, options MessageOptions, items []MessageItem, andThen func(result MessageItem, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showErrorMessage4", Payload: make(map[string]interface{}, 3)}
	msg.Payload["message"] = message
	msg.Payload["options"] = options
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result MessageItem
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				ok = result.populateFrom(payload)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowInformationMessage1(message string, items []string, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showInformationMessage1", Payload: make(map[string]interface{}, 2)}
	msg.Payload["message"] = message
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowInformationMessage2(message string, options MessageOptions, items []string, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showInformationMessage2", Payload: make(map[string]interface{}, 3)}
	msg.Payload["message"] = message
	msg.Payload["options"] = options
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowInformationMessage3(message string, items []MessageItem, andThen func(result MessageItem, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showInformationMessage3", Payload: make(map[string]interface{}, 2)}
	msg.Payload["message"] = message
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result MessageItem
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				ok = result.populateFrom(payload)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowInformationMessage4(message string, options MessageOptions, items []MessageItem, andThen func(result MessageItem, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showInformationMessage4", Payload: make(map[string]interface{}, 3)}
	msg.Payload["message"] = message
	msg.Payload["options"] = options
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result MessageItem
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				ok = result.populateFrom(payload)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowWarningMessage1(message string, items []string, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showWarningMessage1", Payload: make(map[string]interface{}, 2)}
	msg.Payload["message"] = message
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowWarningMessage2(message string, options MessageOptions, items []string, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showWarningMessage2", Payload: make(map[string]interface{}, 3)}
	msg.Payload["message"] = message
	msg.Payload["options"] = options
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowWarningMessage3(message string, items []MessageItem, andThen func(result MessageItem, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showWarningMessage3", Payload: make(map[string]interface{}, 2)}
	msg.Payload["message"] = message
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result MessageItem
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				ok = result.populateFrom(payload)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowWarningMessage4(message string, options MessageOptions, items []MessageItem, andThen func(result MessageItem, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showWarningMessage4", Payload: make(map[string]interface{}, 3)}
	msg.Payload["message"] = message
	msg.Payload["options"] = options
	msg.Payload["items"] = items

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result MessageItem
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				ok = result.populateFrom(payload)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *impl) ShowInputBox(options *InputBoxOptions, andThen func(result string, failure interface{})) {
	msg := msgOutgoing{Ns: "window", Name: "showInputBox", Payload: make(map[string]interface{}, 1)}
	msg.Payload["options"] = options

	var on func(interface{}, bool)
	if andThen != nil {
		on = func(payload interface{}, isFail bool) {
			var result string
			var failure interface{}
			if isFail {
				failure = payload
			} else {
				var ok bool
				result, ok = payload.(string)
				if !ok {
					failure = payload
				}
			}
			andThen(result, failure)
		}
	}

	me.send(&msg, on)
}

func (me *MessageItem) populateFrom(payload interface{}) bool {
	m, ok := payload.(map[string]interface{})
	if ok && m != nil {
		{
			val, exists := m["title"]
			if exists {
				if val != nil {
					var ok bool
					me.Title, ok = val.(string)
					if !ok {
						return false
					}
				} else if true {
					return false
				}
			} else if true {
				return false
			}
		}
		{
			val, exists := m["isCloseAffordance"]
			if exists {
				if val != nil {
					var ok bool
					me.IsCloseAffordance, ok = val.(bool)
					if !ok {
						return false
					}
				} else if false {
					return false
				}
			} else if false {
				return false
			}
		}
		{
			val, exists := m["appzTag"]
			if exists {
				if val != nil {
					me.AppzTag = val
				} else if false {
					return false
				}
			} else if false {
				return false
			}
		}
		return true
	}
	return false
}
