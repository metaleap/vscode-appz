"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-nodejs.ts via github.com/metaleap/vscode-appz/src/gen/main.ts
const core = require("./core");
const vsc_appz_1 = require("./vsc-appz");
class implBase {
    constructor(impl) { this.impl = impl; }
    Impl() { return this.impl; /* crikey, codegen life.. */ }
}
function newipcMsg() { return new core.ipcMsg(); }
function newDisposable() { return new core.Disposable(); }
/**
 * Represents the alignment of status bar items.

 */
var StatusBarAlignment;
(function (StatusBarAlignment) {
    /**
     * Aligned to the left side.

     */
    StatusBarAlignment[StatusBarAlignment["Left"] = 1] = "Left";
    /**
     * Aligned to the right side.

     */
    StatusBarAlignment[StatusBarAlignment["Right"] = 2] = "Right";
})(StatusBarAlignment = exports.StatusBarAlignment || (exports.StatusBarAlignment = {}));
/**
 * Describes the behavior of decorations when typing/editing at their edges.

 */
var DecorationRangeBehavior;
(function (DecorationRangeBehavior) {
    /**
     * The decoration's range will widen when edits occur at the start or end.

     */
    DecorationRangeBehavior[DecorationRangeBehavior["OpenOpen"] = 0] = "OpenOpen";
    /**
     * The decoration's range will not widen when edits occur at the start of end.

     */
    DecorationRangeBehavior[DecorationRangeBehavior["ClosedClosed"] = 1] = "ClosedClosed";
    /**
     * The decoration's range will widen when edits occur at the start, but not at the end.

     */
    DecorationRangeBehavior[DecorationRangeBehavior["OpenClosed"] = 2] = "OpenClosed";
    /**
     * The decoration's range will widen when edits occur at the end, but not at the start.

     */
    DecorationRangeBehavior[DecorationRangeBehavior["ClosedOpen"] = 3] = "ClosedOpen";
})(DecorationRangeBehavior = exports.DecorationRangeBehavior || (exports.DecorationRangeBehavior = {}));
/**
 * Represents different positions for rendering a decoration in an [overview ruler](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions.overviewRulerLane).
 * The overview ruler supports three lanes.

 */
var OverviewRulerLane;
(function (OverviewRulerLane) {
    /**
     * Represents different positions for rendering a decoration in an [overview ruler](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions.overviewRulerLane).
     * The overview ruler supports three lanes.

     */
    OverviewRulerLane[OverviewRulerLane["Left"] = 1] = "Left";
    /**
     * Represents different positions for rendering a decoration in an [overview ruler](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions.overviewRulerLane).
     * The overview ruler supports three lanes.

     */
    OverviewRulerLane[OverviewRulerLane["Center"] = 2] = "Center";
    /**
     * Represents different positions for rendering a decoration in an [overview ruler](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions.overviewRulerLane).
     * The overview ruler supports three lanes.

     */
    OverviewRulerLane[OverviewRulerLane["Right"] = 4] = "Right";
    /**
     * Represents different positions for rendering a decoration in an [overview ruler](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions.overviewRulerLane).
     * The overview ruler supports three lanes.

     */
    OverviewRulerLane[OverviewRulerLane["Full"] = 7] = "Full";
})(OverviewRulerLane = exports.OverviewRulerLane || (exports.OverviewRulerLane = {}));
function newMessageItem() {
    let me;
    me = { loadFromJsonish: _ => MessageItem_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
exports.newMessageItem = newMessageItem;
function newQuickPickItem() {
    let me;
    me = { loadFromJsonish: _ => QuickPickItem_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
exports.newQuickPickItem = newQuickPickItem;
function newWorkspaceFolder() {
    let me;
    me = { loadFromJsonish: _ => WorkspaceFolder_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
function newWindowState() {
    let me;
    me = { loadFromJsonish: _ => WindowState_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
function newStatusBarItem() {
    let me;
    me = { loadFromJsonish: _ => StatusBarItem_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), toJSON: () => undefined };
    me.Show = () => StatusBarItem_Show.call(me);
    me.Hide = () => StatusBarItem_Hide.call(me);
    me.Dispose = () => StatusBarItem_Dispose.call(me);
    me.__appzObjBagPullFromPeer__ = () => StatusBarItem___appzObjBagPullFromPeer__.call(me);
    me.__appzObjBagPushToPeer_ = (a0) => StatusBarItem___appzObjBagPushToPeer_.call(me, a0);
    return me;
}
function newOutputChannel() {
    let me;
    me = { loadFromJsonish: _ => OutputChannel_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), toJSON: () => undefined };
    me.Append = (a0) => OutputChannel_Append.call(me, a0);
    me.AppendLine = (a0) => OutputChannel_AppendLine.call(me, a0);
    me.Clear = () => OutputChannel_Clear.call(me);
    me.Show = (a0) => OutputChannel_Show.call(me, a0);
    me.Hide = () => OutputChannel_Hide.call(me);
    me.Dispose = () => OutputChannel_Dispose.call(me);
    me.__appzObjBagPullFromPeer__ = () => OutputChannel___appzObjBagPullFromPeer__.call(me);
    return me;
}
function newTextEditorDecorationType() {
    let me;
    me = { loadFromJsonish: _ => TextEditorDecorationType_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), toJSON: () => undefined };
    me.Dispose = () => TextEditorDecorationType_Dispose.call(me);
    me.__appzObjBagPullFromPeer__ = () => TextEditorDecorationType___appzObjBagPullFromPeer__.call(me);
    return me;
}
function newInputBox() {
    let me;
    me = { loadFromJsonish: _ => InputBox_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), toJSON: () => undefined };
    me.OnDidChangeValue = (a0) => InputBox_OnDidChangeValue.call(me, a0);
    me.OnDidAccept = (a0) => InputBox_OnDidAccept.call(me, a0);
    me.Show = () => InputBox_Show.call(me);
    me.Hide = () => InputBox_Hide.call(me);
    me.OnDidHide = (a0) => InputBox_OnDidHide.call(me, a0);
    me.Dispose = () => InputBox_Dispose.call(me);
    me.__appzObjBagPullFromPeer__ = () => InputBox___appzObjBagPullFromPeer__.call(me);
    me.__appzObjBagPushToPeer_ = (a0) => InputBox___appzObjBagPushToPeer_.call(me, a0);
    return me;
}
function newQuickPick() {
    let me;
    me = { loadFromJsonish: _ => QuickPick_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), toJSON: () => undefined };
    me.OnDidChangeValue = (a0) => QuickPick_OnDidChangeValue.call(me, a0);
    me.OnDidAccept = (a0) => QuickPick_OnDidAccept.call(me, a0);
    me.OnDidChangeActive = (a0) => QuickPick_OnDidChangeActive.call(me, a0);
    me.OnDidChangeSelection = (a0) => QuickPick_OnDidChangeSelection.call(me, a0);
    me.Show = () => QuickPick_Show.call(me);
    me.Hide = () => QuickPick_Hide.call(me);
    me.OnDidHide = (a0) => QuickPick_OnDidHide.call(me, a0);
    me.Dispose = () => QuickPick_Dispose.call(me);
    me.__appzObjBagPullFromPeer__ = () => QuickPick___appzObjBagPullFromPeer__.call(me);
    me.__appzObjBagPushToPeer_ = (a0) => QuickPick___appzObjBagPushToPeer_.call(me, a0);
    return me;
}
function newWorkspaceFoldersChangeEvent() {
    let me;
    me = { loadFromJsonish: _ => WorkspaceFoldersChangeEvent_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
function newDiagnosticChangeEvent() {
    let me;
    me = { loadFromJsonish: _ => DiagnosticChangeEvent_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
function newEnvBag() {
    let me;
    me = { loadFromJsonish: _ => EnvBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
function newWorkspaceBag() {
    let me;
    me = { loadFromJsonish: _ => WorkspaceBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v) };
    return me;
}
function newStatusBarItemBag() {
    let me;
    me = { loadFromJsonish: _ => StatusBarItemBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), ApplyChanges: () => StatusBarItemBag_ApplyChanges.call(me), ReFetch: () => StatusBarItemBag_ReFetch.call(me) };
    return me;
}
exports.newStatusBarItemBag = newStatusBarItemBag;
function newOutputChannelBag() {
    let me;
    me = { loadFromJsonish: _ => OutputChannelBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), ReFetch: () => OutputChannelBag_ReFetch.call(me) };
    return me;
}
exports.newOutputChannelBag = newOutputChannelBag;
function newTextEditorDecorationTypeBag() {
    let me;
    me = { loadFromJsonish: _ => TextEditorDecorationTypeBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), ReFetch: () => TextEditorDecorationTypeBag_ReFetch.call(me) };
    return me;
}
exports.newTextEditorDecorationTypeBag = newTextEditorDecorationTypeBag;
function newInputBoxBag() {
    let me;
    me = { loadFromJsonish: _ => InputBoxBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), ApplyChanges: () => InputBoxBag_ApplyChanges.call(me), ReFetch: () => InputBoxBag_ReFetch.call(me) };
    return me;
}
exports.newInputBoxBag = newInputBoxBag;
function newQuickPickBag() {
    let me;
    me = { loadFromJsonish: _ => QuickPickBag_loadFromJsonish.call(me, _), toString: () => JSON.stringify(me, (_, v) => (typeof v === 'function') ? undefined : v), ApplyChanges: () => QuickPickBag_ApplyChanges.call(me), ReFetch: () => QuickPickBag_ReFetch.call(me) };
    return me;
}
exports.newQuickPickBag = newQuickPickBag;
class impl {
    constructor() {
        this.Window = new implWindow(this);
        this.Env = new implEnv(this);
        this.Clipboard = new implClipboard(this);
        this.Workspace = new implWorkspace(this);
        this.Languages = new implLanguages(this);
        this.Extensions = new implExtensions(this);
        this.Commands = new implCommands(this);
    }
    toJSON() { return undefined; }
}
exports.impl = impl;
class implWindow extends implBase {
    constructor(impl) { super(impl); }
    ShowInformationMessage1(message, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showInformationMessage1";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowInformationMessage2(message, options, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showInformationMessage2";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["options"] = options;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowInformationMessage3(message, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showInformationMessage3";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newMessageItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowInformationMessage4(message, options, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showInformationMessage4";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["options"] = options;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newMessageItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowWarningMessage1(message, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showWarningMessage1";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowWarningMessage2(message, options, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showWarningMessage2";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["options"] = options;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowWarningMessage3(message, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showWarningMessage3";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newMessageItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowWarningMessage4(message, options, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showWarningMessage4";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["options"] = options;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newMessageItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowErrorMessage1(message, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showErrorMessage1";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowErrorMessage2(message, options, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showErrorMessage2";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["options"] = options;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowErrorMessage3(message, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showErrorMessage3";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newMessageItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowErrorMessage4(message, options, items) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showErrorMessage4";
        msg.Data = {};
        msg.Data["message"] = message;
        msg.Data["options"] = options;
        msg.Data["items"] = items;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newMessageItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowInputBox(options, token) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showInputBox";
        msg.Data = {};
        let fnids;
        fnids = [];
        if ((undefined !== options && null !== options)) {
            options.validateInput_AppzFuncId = "";
            let fn;
            fn = options.validateInput;
            if ((undefined !== fn && null !== fn)) {
                {
                    options.validateInput_AppzFuncId = this.Impl().nextFuncId();
                    fnids.push(options.validateInput_AppzFuncId);
                    this.Impl().cbOther[options.validateInput_AppzFuncId] = (args) => {
                        if (1 !== args.length) {
                            return [null, false];
                        }
                        else {
                            let ok;
                            let __0;
                            if ((undefined !== args[0] && null !== args[0])) {
                                [__0, ok] = [args[0], typeof args[0] === "string"];
                                if (!ok) {
                                    return [null, false];
                                }
                            }
                            return [fn(__0), true];
                        }
                    };
                }
            }
        }
        if ((undefined !== options && null !== options)) {
            msg.Data["options"] = options;
        }
        if ((undefined !== token && null !== token)) {
            token.impl = this.Impl();
            if ("" === token.fnId) {
                {
                    token.fnId = this.Impl().nextFuncId();
                }
            }
            msg.Data["token"] = token.fnId;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, (payload) => {
            if (fnids.length !== 0) {
                {
                    for (const fnid of fnids) {
                        delete this.Impl().cbOther[fnid];
                    }
                }
            }
            return (undefined === onresp || null === onresp) || onresp(payload);
        });
        return (a0) => {
            onret = a0;
        };
    }
    ShowQuickPick1(items, options, token) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showQuickPick1";
        msg.Data = {};
        let fnids;
        fnids = [];
        if (true) {
            options.onDidSelectItem_AppzFuncId = "";
            let fn;
            fn = options.onDidSelectItem;
            if ((undefined !== fn && null !== fn)) {
                {
                    options.onDidSelectItem_AppzFuncId = this.Impl().nextFuncId();
                    fnids.push(options.onDidSelectItem_AppzFuncId);
                    this.Impl().cbOther[options.onDidSelectItem_AppzFuncId] = (args) => {
                        if (1 !== args.length) {
                            return [null, false];
                        }
                        else {
                            let ok;
                            let __0;
                            if ((undefined !== args[0] && null !== args[0])) {
                                __0 = newQuickPickItem();
                                ok = __0.loadFromJsonish(args[0]);
                                if (!ok) {
                                    return [null, false];
                                }
                            }
                            else {
                                return [null, false];
                            }
                            return [fn(__0), true];
                        }
                    };
                }
            }
        }
        msg.Data["items"] = items;
        options.canPickMany = true;
        msg.Data["options"] = options;
        if ((undefined !== token && null !== token)) {
            token.impl = this.Impl();
            if ("" === token.fnId) {
                {
                    token.fnId = this.Impl().nextFuncId();
                }
            }
            msg.Data["token"] = token.fnId;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    [__val__result, ok] = [__item__result, typeof __item__result === "string"];
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, (payload) => {
            if (fnids.length !== 0) {
                {
                    for (const fnid of fnids) {
                        delete this.Impl().cbOther[fnid];
                    }
                }
            }
            return (undefined === onresp || null === onresp) || onresp(payload);
        });
        return (a0) => {
            onret = a0;
        };
    }
    ShowQuickPick2(items, options, token) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showQuickPick2";
        msg.Data = {};
        let fnids;
        fnids = [];
        if ((undefined !== options && null !== options)) {
            options.onDidSelectItem_AppzFuncId = "";
            let fn;
            fn = options.onDidSelectItem;
            if ((undefined !== fn && null !== fn)) {
                {
                    options.onDidSelectItem_AppzFuncId = this.Impl().nextFuncId();
                    fnids.push(options.onDidSelectItem_AppzFuncId);
                    this.Impl().cbOther[options.onDidSelectItem_AppzFuncId] = (args) => {
                        if (1 !== args.length) {
                            return [null, false];
                        }
                        else {
                            let ok;
                            let __0;
                            if ((undefined !== args[0] && null !== args[0])) {
                                __0 = newQuickPickItem();
                                ok = __0.loadFromJsonish(args[0]);
                                if (!ok) {
                                    return [null, false];
                                }
                            }
                            else {
                                return [null, false];
                            }
                            return [fn(__0), true];
                        }
                    };
                }
            }
        }
        msg.Data["items"] = items;
        if ((undefined !== options && null !== options)) {
            msg.Data["options"] = options;
        }
        if ((undefined !== token && null !== token)) {
            token.impl = this.Impl();
            if ("" === token.fnId) {
                {
                    token.fnId = this.Impl().nextFuncId();
                }
            }
            msg.Data["token"] = token.fnId;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, (payload) => {
            if (fnids.length !== 0) {
                {
                    for (const fnid of fnids) {
                        delete this.Impl().cbOther[fnid];
                    }
                }
            }
            return (undefined === onresp || null === onresp) || onresp(payload);
        });
        return (a0) => {
            onret = a0;
        };
    }
    ShowQuickPick3(items, options, token) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showQuickPick3";
        msg.Data = {};
        let fnids;
        fnids = [];
        if (true) {
            options.onDidSelectItem_AppzFuncId = "";
            let fn;
            fn = options.onDidSelectItem;
            if ((undefined !== fn && null !== fn)) {
                {
                    options.onDidSelectItem_AppzFuncId = this.Impl().nextFuncId();
                    fnids.push(options.onDidSelectItem_AppzFuncId);
                    this.Impl().cbOther[options.onDidSelectItem_AppzFuncId] = (args) => {
                        if (1 !== args.length) {
                            return [null, false];
                        }
                        else {
                            let ok;
                            let __0;
                            if ((undefined !== args[0] && null !== args[0])) {
                                __0 = newQuickPickItem();
                                ok = __0.loadFromJsonish(args[0]);
                                if (!ok) {
                                    return [null, false];
                                }
                            }
                            else {
                                return [null, false];
                            }
                            return [fn(__0), true];
                        }
                    };
                }
            }
        }
        msg.Data["items"] = items;
        options.canPickMany = true;
        msg.Data["options"] = options;
        if ((undefined !== token && null !== token)) {
            token.impl = this.Impl();
            if ("" === token.fnId) {
                {
                    token.fnId = this.Impl().nextFuncId();
                }
            }
            msg.Data["token"] = token.fnId;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    __val__result = newQuickPickItem();
                    ok = __val__result.loadFromJsonish(__item__result);
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, (payload) => {
            if (fnids.length !== 0) {
                {
                    for (const fnid of fnids) {
                        delete this.Impl().cbOther[fnid];
                    }
                }
            }
            return (undefined === onresp || null === onresp) || onresp(payload);
        });
        return (a0) => {
            onret = a0;
        };
    }
    ShowQuickPick4(items, options, token) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showQuickPick4";
        msg.Data = {};
        let fnids;
        fnids = [];
        if ((undefined !== options && null !== options)) {
            options.onDidSelectItem_AppzFuncId = "";
            let fn;
            fn = options.onDidSelectItem;
            if ((undefined !== fn && null !== fn)) {
                {
                    options.onDidSelectItem_AppzFuncId = this.Impl().nextFuncId();
                    fnids.push(options.onDidSelectItem_AppzFuncId);
                    this.Impl().cbOther[options.onDidSelectItem_AppzFuncId] = (args) => {
                        if (1 !== args.length) {
                            return [null, false];
                        }
                        else {
                            let ok;
                            let __0;
                            if ((undefined !== args[0] && null !== args[0])) {
                                __0 = newQuickPickItem();
                                ok = __0.loadFromJsonish(args[0]);
                                if (!ok) {
                                    return [null, false];
                                }
                            }
                            else {
                                return [null, false];
                            }
                            return [fn(__0), true];
                        }
                    };
                }
            }
        }
        msg.Data["items"] = items;
        if ((undefined !== options && null !== options)) {
            msg.Data["options"] = options;
        }
        if ((undefined !== token && null !== token)) {
            token.impl = this.Impl();
            if ("" === token.fnId) {
                {
                    token.fnId = this.Impl().nextFuncId();
                }
            }
            msg.Data["token"] = token.fnId;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newQuickPickItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, (payload) => {
            if (fnids.length !== 0) {
                {
                    for (const fnid of fnids) {
                        delete this.Impl().cbOther[fnid];
                    }
                }
            }
            return (undefined === onresp || null === onresp) || onresp(payload);
        });
        return (a0) => {
            onret = a0;
        };
    }
    SetStatusBarMessage1(text, hideAfterTimeout) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.setStatusBarMessage1";
        msg.Data = {};
        msg.Data["text"] = text;
        msg.Data["hideAfterTimeout"] = hideAfterTimeout;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl()));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    SetStatusBarMessage2(text) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.setStatusBarMessage2";
        msg.Data = {};
        msg.Data["text"] = text;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl()));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowSaveDialog(options) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showSaveDialog";
        msg.Data = {};
        msg.Data["options"] = options;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowOpenDialog(options) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showOpenDialog";
        msg.Data = {};
        msg.Data["options"] = options;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    [__val__result, ok] = [__item__result, typeof __item__result === "string"];
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ShowWorkspaceFolderPick(options) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.showWorkspaceFolderPick";
        msg.Data = {};
        if ((undefined !== options && null !== options)) {
            msg.Data["options"] = options;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newWorkspaceFolder();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    State() {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.state";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newWindowState();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    OnDidChangeWindowState(listener) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.onDidChangeWindowState";
        msg.Data = {};
        let listenerFnId;
        if ((undefined === listener || null === listener)) {
            vsc_appz_1.OnError(this.Impl(), "Window.OnDidChangeWindowState: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
            return null;
        }
        listenerFnId = this.Impl().nextSub((args) => {
            let ok;
            if (1 !== args.length) {
                return ok;
            }
            let _a_0_;
            _a_0_ = newWindowState();
            ok = _a_0_.loadFromJsonish(args[0]);
            if (!ok) {
                return false;
            }
            listener(_a_0_);
            return true;
        }, null);
        msg.Data["listener"] = listenerFnId;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl(), listenerFnId));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    CreateStatusBarItem(alignment, priority) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.createStatusBarItem";
        msg.Data = {};
        if ((undefined !== alignment && null !== alignment)) {
            msg.Data["alignment"] = alignment;
        }
        if ((undefined !== priority && null !== priority)) {
            msg.Data["priority"] = priority;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newStatusBarItem();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
                result.__disp__.impl = this.Impl();
            }
            else {
                return false;
            }
            result.__appzObjBagPullFromPeer__()(() => {
                if ((undefined !== onret && null !== onret)) {
                    onret(result);
                }
            });
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    CreateOutputChannel(name) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.createOutputChannel";
        msg.Data = {};
        msg.Data["name"] = name;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newOutputChannel();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
                result.__disp__.impl = this.Impl();
            }
            else {
                return false;
            }
            result.__appzObjBagPullFromPeer__()(() => {
                if ((undefined !== onret && null !== onret)) {
                    onret(result);
                }
            });
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    CreateTextEditorDecorationType(options) {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.createTextEditorDecorationType";
        msg.Data = {};
        msg.Data["options"] = options;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newTextEditorDecorationType();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
                result.__disp__.impl = this.Impl();
            }
            else {
                return false;
            }
            result.__appzObjBagPullFromPeer__()(() => {
                if ((undefined !== onret && null !== onret)) {
                    onret(result);
                }
            });
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    CreateInputBox() {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.createInputBox";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newInputBox();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
                result.__disp__.impl = this.Impl();
            }
            else {
                return false;
            }
            result.__appzObjBagPullFromPeer__()(() => {
                if ((undefined !== onret && null !== onret)) {
                    onret(result);
                }
            });
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    CreateQuickPick() {
        let msg;
        msg = newipcMsg();
        msg.QName = "window.createQuickPick";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newQuickPick();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
                result.__disp__.impl = this.Impl();
            }
            else {
                return false;
            }
            result.__appzObjBagPullFromPeer__()(() => {
                if ((undefined !== onret && null !== onret)) {
                    onret(result);
                }
            });
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
}
class implEnv extends implBase {
    constructor(impl) { super(impl); }
    OpenExternal(target) {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.openExternal";
        msg.Data = {};
        msg.Data["target"] = target;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "boolean"];
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    AppName() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.appName";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    AppRoot() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.appRoot";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    Language() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.language";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    MachineId() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.machineId";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    RemoteName() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.remoteName";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    SessionId() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.sessionId";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    Shell() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.shell";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    UriScheme() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.uriScheme";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    AllProperties() {
        let msg;
        msg = newipcMsg();
        msg.QName = "env.AllProperties";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newEnvBag();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    Clipboard() {
        return this.Impl().Clipboard;
    }
}
class implClipboard extends implBase {
    constructor(impl) { super(impl); }
    ReadText() {
        let msg;
        msg = newipcMsg();
        msg.QName = "clipboard.readText";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    WriteText(value) {
        let msg;
        msg = newipcMsg();
        msg.QName = "clipboard.writeText";
        msg.Data = {};
        msg.Data["value"] = value;
        let onresp;
        let onret;
        onresp = (payload) => {
            if ((undefined !== payload && null !== payload)) {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret();
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
}
class implWorkspace extends implBase {
    constructor(impl) { super(impl); }
    Name() {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.name";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    WorkspaceFile() {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.workspaceFile";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    SaveAll(includeUntitled) {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.saveAll";
        msg.Data = {};
        msg.Data["includeUntitled"] = includeUntitled;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, typeof payload === "boolean"];
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    OnDidChangeWorkspaceFolders(listener) {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.onDidChangeWorkspaceFolders";
        msg.Data = {};
        let listenerFnId;
        if ((undefined === listener || null === listener)) {
            vsc_appz_1.OnError(this.Impl(), "Workspace.OnDidChangeWorkspaceFolders: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
            return null;
        }
        listenerFnId = this.Impl().nextSub((args) => {
            let ok;
            if (1 !== args.length) {
                return ok;
            }
            let _a_0_;
            _a_0_ = newWorkspaceFoldersChangeEvent();
            ok = _a_0_.loadFromJsonish(args[0]);
            if (!ok) {
                return false;
            }
            listener(_a_0_);
            return true;
        }, null);
        msg.Data["listener"] = listenerFnId;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl(), listenerFnId));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    GetWorkspaceFolder(uri) {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.getWorkspaceFolder";
        msg.Data = {};
        msg.Data["uri"] = uri;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newWorkspaceFolder();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    WorkspaceFolders() {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.workspaceFolders";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    __val__result = newWorkspaceFolder();
                    ok = __val__result.loadFromJsonish(__item__result);
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    FindFiles(include, exclude, maxResults, token) {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.findFiles";
        msg.Data = {};
        msg.Data["include"] = include;
        if ((undefined !== exclude && null !== exclude)) {
            msg.Data["exclude"] = exclude;
        }
        if ((undefined !== maxResults && null !== maxResults)) {
            msg.Data["maxResults"] = maxResults;
        }
        if ((undefined !== token && null !== token)) {
            token.impl = this.Impl();
            if ("" === token.fnId) {
                {
                    token.fnId = this.Impl().nextFuncId();
                }
            }
            msg.Data["token"] = token.fnId;
        }
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    [__val__result, ok] = [__item__result, typeof __item__result === "string"];
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    AsRelativePath(pathOrUri, includeWorkspaceFolder) {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.asRelativePath";
        msg.Data = {};
        msg.Data["pathOrUri"] = pathOrUri;
        msg.Data["includeWorkspaceFolder"] = includeWorkspaceFolder;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let _result_;
                [_result_, ok] = [payload, typeof payload === "string"];
                if (!ok) {
                    return false;
                }
                result = _result_;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    AllProperties() {
        let msg;
        msg = newipcMsg();
        msg.QName = "workspace.AllProperties";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newWorkspaceBag();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
}
class implLanguages extends implBase {
    constructor(impl) { super(impl); }
    GetLanguages() {
        let msg;
        msg = newipcMsg();
        msg.QName = "languages.getLanguages";
        msg.Data = {};
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    [__val__result, ok] = [__item__result, typeof __item__result === "string"];
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    OnDidChangeDiagnostics(listener) {
        let msg;
        msg = newipcMsg();
        msg.QName = "languages.onDidChangeDiagnostics";
        msg.Data = {};
        let listenerFnId;
        if ((undefined === listener || null === listener)) {
            vsc_appz_1.OnError(this.Impl(), "Languages.OnDidChangeDiagnostics: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
            return null;
        }
        listenerFnId = this.Impl().nextSub((args) => {
            let ok;
            if (1 !== args.length) {
                return ok;
            }
            let _a_0_;
            _a_0_ = newDiagnosticChangeEvent();
            ok = _a_0_.loadFromJsonish(args[0]);
            if (!ok) {
                return false;
            }
            listener(_a_0_);
            return true;
        }, null);
        msg.Data["listener"] = listenerFnId;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl(), listenerFnId));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
}
class implExtensions extends implBase {
    constructor(impl) { super(impl); }
    OnDidChange(listener) {
        let msg;
        msg = newipcMsg();
        msg.QName = "extensions.onDidChange";
        msg.Data = {};
        let listenerFnId;
        if ((undefined === listener || null === listener)) {
            vsc_appz_1.OnError(this.Impl(), "Extensions.OnDidChange: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
            return null;
        }
        listenerFnId = this.Impl().nextSub((args) => {
            let ok;
            if (0 !== args.length) {
                return ok;
            }
            listener();
            return true;
        }, null);
        msg.Data["listener"] = listenerFnId;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl(), listenerFnId));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
}
class implCommands extends implBase {
    constructor(impl) { super(impl); }
    RegisterCommand(command, callback) {
        let msg;
        msg = newipcMsg();
        msg.QName = "commands.registerCommand";
        msg.Data = {};
        msg.Data["command"] = command;
        let callbackFnId;
        if ((undefined === callback || null === callback)) {
            vsc_appz_1.OnError(this.Impl(), "Commands.RegisterCommand: the 'callback' arg (which is not optional but required) was not passed by the caller", null);
            return null;
        }
        callbackFnId = this.Impl().nextSub(null, (args) => {
            let ok;
            if (1 !== args.length) {
                return [null, ok];
            }
            let ret;
            let _a_0_;
            [_a_0_, ok] = [args[0], (typeof args[0] === "object") && (typeof args[0]["length"] === "number")];
            if (!ok) {
                return [null, false];
            }
            ret = callback(_a_0_);
            return [ret, true];
        });
        msg.Data["callback"] = callbackFnId;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                result = newDisposable();
                ok = result.loadFromJsonish(payload);
                if (!ok) {
                    return false;
                }
            }
            else {
                return false;
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result.bind(this.Impl(), callbackFnId));
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    ExecuteCommand(command, rest) {
        let msg;
        msg = newipcMsg();
        msg.QName = "commands.executeCommand";
        msg.Data = {};
        msg.Data["command"] = command;
        msg.Data["rest"] = rest;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                [result, ok] = [payload, true];
                if (ok) {
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
    GetCommands(filterInternal) {
        let msg;
        msg = newipcMsg();
        msg.QName = "commands.getCommands";
        msg.Data = {};
        msg.Data["filterInternal"] = filterInternal;
        let onresp;
        let onret;
        onresp = (payload) => {
            let ok;
            let result;
            if ((undefined !== payload && null !== payload)) {
                let __coll__result;
                [__coll__result, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
                if (!ok) {
                    return false;
                }
                result = new Array(__coll__result.length);
                let __idx__result;
                __idx__result = 0;
                for (const __item__result of __coll__result) {
                    let __val__result;
                    [__val__result, ok] = [__item__result, typeof __item__result === "string"];
                    if (!ok) {
                        return false;
                    }
                    result[__idx__result] = __val__result;
                    __idx__result = __idx__result + 1;
                }
            }
            if ((undefined !== onret && null !== onret)) {
                onret(result);
            }
            return true;
        };
        this.Impl().send(msg, onresp);
        return (a0) => {
            onret = a0;
        };
    }
}
function StatusBarItem_Show() {
    let msg;
    msg = newipcMsg();
    msg.QName = "StatusBarItem.show";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function StatusBarItem_Hide() {
    let msg;
    msg = newipcMsg();
    msg.QName = "StatusBarItem.hide";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function StatusBarItem_Dispose() {
    return this.__disp__.Dispose();
}
function StatusBarItem___appzObjBagPullFromPeer__() {
    let msg;
    msg = newipcMsg();
    msg.QName = "StatusBarItem.__appzObjBagPullFromPeer__";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        if ((undefined === this.CfgBag || null === this.CfgBag)) {
            this.CfgBag = newStatusBarItemBag();
        }
        this.CfgBag.__holder__ = this;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function StatusBarItem___appzObjBagPushToPeer_(allUpdates) {
    let msg;
    msg = newipcMsg();
    msg.QName = "StatusBarItem.__appzObjBagPushToPeer_";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    msg.Data["allUpdates"] = allUpdates;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function OutputChannel_Append(value) {
    let msg;
    msg = newipcMsg();
    msg.QName = "OutputChannel.append";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    msg.Data["value"] = value;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function OutputChannel_AppendLine(value) {
    let msg;
    msg = newipcMsg();
    msg.QName = "OutputChannel.appendLine";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    msg.Data["value"] = value;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function OutputChannel_Clear() {
    let msg;
    msg = newipcMsg();
    msg.QName = "OutputChannel.clear";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function OutputChannel_Show(preserveFocus) {
    let msg;
    msg = newipcMsg();
    msg.QName = "OutputChannel.show";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    msg.Data["preserveFocus"] = preserveFocus;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function OutputChannel_Hide() {
    let msg;
    msg = newipcMsg();
    msg.QName = "OutputChannel.hide";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function OutputChannel_Dispose() {
    return this.__disp__.Dispose();
}
function OutputChannel___appzObjBagPullFromPeer__() {
    let msg;
    msg = newipcMsg();
    msg.QName = "OutputChannel.__appzObjBagPullFromPeer__";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        if ((undefined === this.CfgBag || null === this.CfgBag)) {
            this.CfgBag = newOutputChannelBag();
        }
        this.CfgBag.__holder__ = this;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function TextEditorDecorationType_Dispose() {
    return this.__disp__.Dispose();
}
function TextEditorDecorationType___appzObjBagPullFromPeer__() {
    let msg;
    msg = newipcMsg();
    msg.QName = "TextEditorDecorationType.__appzObjBagPullFromPeer__";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        if ((undefined === this.CfgBag || null === this.CfgBag)) {
            this.CfgBag = newTextEditorDecorationTypeBag();
        }
        this.CfgBag.__holder__ = this;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox_OnDidChangeValue(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.onDidChangeValue";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "InputBox.OnDidChangeValue: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (2 !== args.length) {
            return ok;
        }
        let _a_0_;
        [_a_0_, ok] = [args[0], typeof args[0] === "string"];
        if (!ok) {
            return false;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[1]);
            }
            if (!ok) {
                return false;
            }
            handler(_a_0_);
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox_OnDidAccept(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.onDidAccept";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "InputBox.OnDidAccept: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (1 !== args.length) {
            return ok;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[0]);
            }
            if (!ok) {
                return false;
            }
            handler();
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox_Show() {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.show";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox_Hide() {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.hide";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox_OnDidHide(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.onDidHide";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "InputBox.OnDidHide: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (1 !== args.length) {
            return ok;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[0]);
            }
            if (!ok) {
                return false;
            }
            handler();
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox_Dispose() {
    return this.__disp__.Dispose();
}
function InputBox___appzObjBagPullFromPeer__() {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.__appzObjBagPullFromPeer__";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        if ((undefined === this.CfgBag || null === this.CfgBag)) {
            this.CfgBag = newInputBoxBag();
        }
        this.CfgBag.__holder__ = this;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function InputBox___appzObjBagPushToPeer_(allUpdates) {
    let msg;
    msg = newipcMsg();
    msg.QName = "InputBox.__appzObjBagPushToPeer_";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    msg.Data["allUpdates"] = allUpdates;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_OnDidChangeValue(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.onDidChangeValue";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "QuickPick.OnDidChangeValue: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (2 !== args.length) {
            return ok;
        }
        let _a_0_;
        [_a_0_, ok] = [args[0], typeof args[0] === "string"];
        if (!ok) {
            return false;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[1]);
            }
            if (!ok) {
                return false;
            }
            handler(_a_0_);
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_OnDidAccept(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.onDidAccept";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "QuickPick.OnDidAccept: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (1 !== args.length) {
            return ok;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[0]);
            }
            if (!ok) {
                return false;
            }
            handler();
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_OnDidChangeActive(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.onDidChangeActive";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "QuickPick.OnDidChangeActive: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (2 !== args.length) {
            return ok;
        }
        let _a_0_;
        let __coll___a_0_;
        [__coll___a_0_, ok] = [args[0], (typeof args[0] === "object") && (typeof args[0]["length"] === "number")];
        if (!ok) {
            return false;
        }
        _a_0_ = new Array(__coll___a_0_.length);
        let __idx___a_0_;
        __idx___a_0_ = 0;
        for (const __item___a_0_ of __coll___a_0_) {
            let __val___a_0_;
            __val___a_0_ = newQuickPickItem();
            ok = __val___a_0_.loadFromJsonish(__item___a_0_);
            if (!ok) {
                return false;
            }
            _a_0_[__idx___a_0_] = __val___a_0_;
            __idx___a_0_ = __idx___a_0_ + 1;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[1]);
            }
            if (!ok) {
                return false;
            }
            handler(_a_0_);
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_OnDidChangeSelection(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.onDidChangeSelection";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "QuickPick.OnDidChangeSelection: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (2 !== args.length) {
            return ok;
        }
        let _a_0_;
        let __coll___a_0_;
        [__coll___a_0_, ok] = [args[0], (typeof args[0] === "object") && (typeof args[0]["length"] === "number")];
        if (!ok) {
            return false;
        }
        _a_0_ = new Array(__coll___a_0_.length);
        let __idx___a_0_;
        __idx___a_0_ = 0;
        for (const __item___a_0_ of __coll___a_0_) {
            let __val___a_0_;
            __val___a_0_ = newQuickPickItem();
            ok = __val___a_0_.loadFromJsonish(__item___a_0_);
            if (!ok) {
                return false;
            }
            _a_0_[__idx___a_0_] = __val___a_0_;
            __idx___a_0_ = __idx___a_0_ + 1;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[1]);
            }
            if (!ok) {
                return false;
            }
            handler(_a_0_);
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_Show() {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.show";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_Hide() {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.hide";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let it;
        let ok;
        [it, ok] = [payload, (typeof payload === "object") && (typeof payload["length"] === "number")];
        if (!ok) {
            return false;
        }
        if (2 !== it.length || (undefined === it[1] || null === it[1])) {
            return false;
        }
        {
            ok = this.CfgBag.loadFromJsonish(it[1]);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_OnDidHide(handler) {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.onDidHide";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let handlerFnId;
    if ((undefined === handler || null === handler)) {
        vsc_appz_1.OnError(this.__disp__.impl, "QuickPick.OnDidHide: the 'handler' arg (which is not optional but required) was not passed by the caller", null);
        return null;
    }
    handlerFnId = this.__disp__.impl.nextSub((args) => {
        let ok;
        if (1 !== args.length) {
            return ok;
        }
        {
            {
                ok = this.CfgBag.loadFromJsonish(args[0]);
            }
            if (!ok) {
                return false;
            }
            handler();
        }
        return true;
    }, null);
    msg.Data["handler"] = handlerFnId;
    this.__disp__.addSub(handlerFnId);
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        let result;
        if ((undefined !== payload && null !== payload)) {
            result = newDisposable();
            ok = result.loadFromJsonish(payload);
            if (!ok) {
                return false;
            }
        }
        else {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret(result.bind(this.__disp__.impl, handlerFnId));
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick_Dispose() {
    return this.__disp__.Dispose();
}
function QuickPick___appzObjBagPullFromPeer__() {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.__appzObjBagPullFromPeer__";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        if ((undefined === this.CfgBag || null === this.CfgBag)) {
            this.CfgBag = newQuickPickBag();
        }
        this.CfgBag.__holder__ = this;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function QuickPick___appzObjBagPushToPeer_(allUpdates) {
    let msg;
    msg = newipcMsg();
    msg.QName = "QuickPick.__appzObjBagPushToPeer_";
    msg.Data = {};
    msg.Data[""] = this.__disp__.id;
    msg.Data["allUpdates"] = allUpdates;
    let onresp;
    let onret;
    onresp = (payload) => {
        let ok;
        {
            ok = this.CfgBag.loadFromJsonish(payload);
        }
        if (!ok) {
            return false;
        }
        if ((undefined !== onret && null !== onret)) {
            onret();
        }
        return true;
    };
    this.__disp__.impl.send(msg, onresp);
    return (a0) => {
        onret = a0;
    };
}
function StatusBarItemBag_ReFetch() {
    return this.__holder__.__appzObjBagPullFromPeer__();
}
function StatusBarItemBag_ApplyChanges() {
    return this.__holder__.__appzObjBagPushToPeer_(this);
}
function OutputChannelBag_ReFetch() {
    return this.__holder__.__appzObjBagPullFromPeer__();
}
function TextEditorDecorationTypeBag_ReFetch() {
    return this.__holder__.__appzObjBagPullFromPeer__();
}
function InputBoxBag_ReFetch() {
    return this.__holder__.__appzObjBagPullFromPeer__();
}
function InputBoxBag_ApplyChanges() {
    return this.__holder__.__appzObjBagPushToPeer_(this);
}
function QuickPickBag_ReFetch() {
    return this.__holder__.__appzObjBagPullFromPeer__();
}
function QuickPickBag_ApplyChanges() {
    return this.__holder__.__appzObjBagPushToPeer_(this);
}
function MessageItem_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["title"], undefined !== it["title"]];
    if (ok) {
        let title;
        if ((undefined !== val && null !== val)) {
            [title, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.title = title;
    }
    else {
        return false;
    }
    [val, ok] = [it["isCloseAffordance"], undefined !== it["isCloseAffordance"]];
    if (ok) {
        let isCloseAffordance;
        if ((undefined !== val && null !== val)) {
            let _isCloseAffordance_;
            [_isCloseAffordance_, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
            isCloseAffordance = _isCloseAffordance_;
        }
        this.isCloseAffordance = isCloseAffordance;
    }
    [val, ok] = [it["my"], undefined !== it["my"]];
    if (ok) {
        let my;
        if ((undefined !== val && null !== val)) {
            [my, ok] = [val, typeof val === "object"];
            if (!ok) {
                return false;
            }
        }
        this.my = my;
    }
    return true;
}
function QuickPickItem_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["label"], undefined !== it["label"]];
    if (ok) {
        let label;
        if ((undefined !== val && null !== val)) {
            [label, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.label = label;
    }
    else {
        return false;
    }
    [val, ok] = [it["description"], undefined !== it["description"]];
    if (ok) {
        let description;
        if ((undefined !== val && null !== val)) {
            let _description_;
            [_description_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            description = _description_;
        }
        this.description = description;
    }
    [val, ok] = [it["detail"], undefined !== it["detail"]];
    if (ok) {
        let detail;
        if ((undefined !== val && null !== val)) {
            let _detail_;
            [_detail_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            detail = _detail_;
        }
        this.detail = detail;
    }
    [val, ok] = [it["picked"], undefined !== it["picked"]];
    if (ok) {
        let picked;
        if ((undefined !== val && null !== val)) {
            let _picked_;
            [_picked_, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
            picked = _picked_;
        }
        this.picked = picked;
    }
    [val, ok] = [it["alwaysShow"], undefined !== it["alwaysShow"]];
    if (ok) {
        let alwaysShow;
        if ((undefined !== val && null !== val)) {
            let _alwaysShow_;
            [_alwaysShow_, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
            alwaysShow = _alwaysShow_;
        }
        this.alwaysShow = alwaysShow;
    }
    [val, ok] = [it["my"], undefined !== it["my"]];
    if (ok) {
        let my;
        if ((undefined !== val && null !== val)) {
            [my, ok] = [val, typeof val === "object"];
            if (!ok) {
                return false;
            }
        }
        this.my = my;
    }
    return true;
}
function WorkspaceFolder_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["uri"], undefined !== it["uri"]];
    if (ok) {
        let uri;
        if ((undefined !== val && null !== val)) {
            [uri, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.uri = uri;
    }
    else {
        return false;
    }
    [val, ok] = [it["name"], undefined !== it["name"]];
    if (ok) {
        let name;
        if ((undefined !== val && null !== val)) {
            [name, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.name = name;
    }
    else {
        return false;
    }
    [val, ok] = [it["index"], undefined !== it["index"]];
    if (ok) {
        let index;
        if ((undefined !== val && null !== val)) {
            [index, ok] = [val, typeof val === "number"];
            if (!ok) {
                let __index__;
                [__index__, ok] = [val, typeof val === "number"];
                if (!ok) {
                    return false;
                }
                index = __index__;
            }
        }
        this.index = index;
    }
    else {
        return false;
    }
    return true;
}
function WindowState_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["focused"], undefined !== it["focused"]];
    if (ok) {
        let focused;
        if ((undefined !== val && null !== val)) {
            [focused, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.focused = focused;
    }
    else {
        return false;
    }
    return true;
}
function StatusBarItem_loadFromJsonish(payload) {
    let ok;
    this.__disp__ = newDisposable();
    ok = this.__disp__.loadFromJsonish(payload);
    return ok;
}
function OutputChannel_loadFromJsonish(payload) {
    let ok;
    this.__disp__ = newDisposable();
    ok = this.__disp__.loadFromJsonish(payload);
    return ok;
}
function TextEditorDecorationType_loadFromJsonish(payload) {
    let ok;
    this.__disp__ = newDisposable();
    ok = this.__disp__.loadFromJsonish(payload);
    return ok;
}
function InputBox_loadFromJsonish(payload) {
    let ok;
    this.__disp__ = newDisposable();
    ok = this.__disp__.loadFromJsonish(payload);
    return ok;
}
function QuickPick_loadFromJsonish(payload) {
    let ok;
    this.__disp__ = newDisposable();
    ok = this.__disp__.loadFromJsonish(payload);
    return ok;
}
function EnvBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["appName"], undefined !== it["appName"]];
    if (ok) {
        let appName;
        if ((undefined !== val && null !== val)) {
            let _appName_;
            [_appName_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            appName = _appName_;
        }
        this.appName = appName;
    }
    [val, ok] = [it["appRoot"], undefined !== it["appRoot"]];
    if (ok) {
        let appRoot;
        if ((undefined !== val && null !== val)) {
            let _appRoot_;
            [_appRoot_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            appRoot = _appRoot_;
        }
        this.appRoot = appRoot;
    }
    [val, ok] = [it["language"], undefined !== it["language"]];
    if (ok) {
        let language;
        if ((undefined !== val && null !== val)) {
            let _language_;
            [_language_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            language = _language_;
        }
        this.language = language;
    }
    [val, ok] = [it["machineId"], undefined !== it["machineId"]];
    if (ok) {
        let machineId;
        if ((undefined !== val && null !== val)) {
            let _machineId_;
            [_machineId_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            machineId = _machineId_;
        }
        this.machineId = machineId;
    }
    [val, ok] = [it["remoteName"], undefined !== it["remoteName"]];
    if (ok) {
        let remoteName;
        if ((undefined !== val && null !== val)) {
            let _remoteName_;
            [_remoteName_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            remoteName = _remoteName_;
        }
        this.remoteName = remoteName;
    }
    [val, ok] = [it["sessionId"], undefined !== it["sessionId"]];
    if (ok) {
        let sessionId;
        if ((undefined !== val && null !== val)) {
            let _sessionId_;
            [_sessionId_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            sessionId = _sessionId_;
        }
        this.sessionId = sessionId;
    }
    [val, ok] = [it["shell"], undefined !== it["shell"]];
    if (ok) {
        let shell;
        if ((undefined !== val && null !== val)) {
            let _shell_;
            [_shell_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            shell = _shell_;
        }
        this.shell = shell;
    }
    [val, ok] = [it["uriScheme"], undefined !== it["uriScheme"]];
    if (ok) {
        let uriScheme;
        if ((undefined !== val && null !== val)) {
            let _uriScheme_;
            [_uriScheme_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            uriScheme = _uriScheme_;
        }
        this.uriScheme = uriScheme;
    }
    return true;
}
function WorkspaceFoldersChangeEvent_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["added"], undefined !== it["added"]];
    if (ok) {
        let added;
        if ((undefined !== val && null !== val)) {
            let __coll__added;
            [__coll__added, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            added = new Array(__coll__added.length);
            let __idx__added;
            __idx__added = 0;
            for (const __item__added of __coll__added) {
                let __val__added;
                __val__added = newWorkspaceFolder();
                ok = __val__added.loadFromJsonish(__item__added);
                if (!ok) {
                    return false;
                }
                added[__idx__added] = __val__added;
                __idx__added = __idx__added + 1;
            }
        }
        this.added = added;
    }
    else {
        return false;
    }
    [val, ok] = [it["removed"], undefined !== it["removed"]];
    if (ok) {
        let removed;
        if ((undefined !== val && null !== val)) {
            let __coll__removed;
            [__coll__removed, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            removed = new Array(__coll__removed.length);
            let __idx__removed;
            __idx__removed = 0;
            for (const __item__removed of __coll__removed) {
                let __val__removed;
                __val__removed = newWorkspaceFolder();
                ok = __val__removed.loadFromJsonish(__item__removed);
                if (!ok) {
                    return false;
                }
                removed[__idx__removed] = __val__removed;
                __idx__removed = __idx__removed + 1;
            }
        }
        this.removed = removed;
    }
    else {
        return false;
    }
    return true;
}
function WorkspaceBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["name"], undefined !== it["name"]];
    if (ok) {
        let name;
        if ((undefined !== val && null !== val)) {
            let _name_;
            [_name_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            name = _name_;
        }
        this.name = name;
    }
    [val, ok] = [it["workspaceFile"], undefined !== it["workspaceFile"]];
    if (ok) {
        let workspaceFile;
        if ((undefined !== val && null !== val)) {
            let _workspaceFile_;
            [_workspaceFile_, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
            workspaceFile = _workspaceFile_;
        }
        this.workspaceFile = workspaceFile;
    }
    [val, ok] = [it["workspaceFolders"], undefined !== it["workspaceFolders"]];
    if (ok) {
        let workspaceFolders;
        if ((undefined !== val && null !== val)) {
            let __coll__workspaceFolders;
            [__coll__workspaceFolders, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            workspaceFolders = new Array(__coll__workspaceFolders.length);
            let __idx__workspaceFolders;
            __idx__workspaceFolders = 0;
            for (const __item__workspaceFolders of __coll__workspaceFolders) {
                let __val__workspaceFolders;
                __val__workspaceFolders = newWorkspaceFolder();
                ok = __val__workspaceFolders.loadFromJsonish(__item__workspaceFolders);
                if (!ok) {
                    return false;
                }
                workspaceFolders[__idx__workspaceFolders] = __val__workspaceFolders;
                __idx__workspaceFolders = __idx__workspaceFolders + 1;
            }
        }
        this.workspaceFolders = workspaceFolders;
    }
    return true;
}
function DiagnosticChangeEvent_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["uris"], undefined !== it["uris"]];
    if (ok) {
        let uris;
        if ((undefined !== val && null !== val)) {
            let __coll__uris;
            [__coll__uris, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            uris = new Array(__coll__uris.length);
            let __idx__uris;
            __idx__uris = 0;
            for (const __item__uris of __coll__uris) {
                let __val__uris;
                [__val__uris, ok] = [__item__uris, typeof __item__uris === "string"];
                if (!ok) {
                    return false;
                }
                uris[__idx__uris] = __val__uris;
                __idx__uris = __idx__uris + 1;
            }
        }
        this.uris = uris;
    }
    else {
        return false;
    }
    return true;
}
function StatusBarItemBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["alignment"], undefined !== it["alignment"]];
    if (ok) {
        let alignment;
        if ((undefined !== val && null !== val)) {
            let i_alignment;
            [i_alignment, ok] = [val, typeof val === "number"];
            if (!ok) {
                let __i_alignment__;
                [__i_alignment__, ok] = [val, typeof val === "number"];
                if (!ok) {
                    return false;
                }
                i_alignment = __i_alignment__;
            }
            alignment = i_alignment;
        }
        this.Alignment = () => {
            return alignment;
        };
    }
    [val, ok] = [it["priority"], undefined !== it["priority"]];
    if (ok) {
        let priority;
        if ((undefined !== val && null !== val)) {
            [priority, ok] = [val, typeof val === "number"];
            if (!ok) {
                let __priority__;
                [__priority__, ok] = [val, typeof val === "number"];
                if (!ok) {
                    return false;
                }
                priority = __priority__;
            }
        }
        this.Priority = () => {
            return priority;
        };
    }
    [val, ok] = [it["text"], undefined !== it["text"]];
    if (ok) {
        let text;
        if ((undefined !== val && null !== val)) {
            [text, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.text = text;
    }
    [val, ok] = [it["tooltip"], undefined !== it["tooltip"]];
    if (ok) {
        let tooltip;
        if ((undefined !== val && null !== val)) {
            [tooltip, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.tooltip = tooltip;
    }
    [val, ok] = [it["color"], undefined !== it["color"]];
    if (ok) {
        let color;
        if ((undefined !== val && null !== val)) {
            [color, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.color = color;
    }
    [val, ok] = [it["command"], undefined !== it["command"]];
    if (ok) {
        let command;
        if ((undefined !== val && null !== val)) {
            [command, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.command = command;
    }
    return true;
}
function OutputChannelBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["name"], undefined !== it["name"]];
    if (ok) {
        let name;
        if ((undefined !== val && null !== val)) {
            [name, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.Name = () => {
            return name;
        };
    }
    return true;
}
function TextEditorDecorationTypeBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["key"], undefined !== it["key"]];
    if (ok) {
        let key;
        if ((undefined !== val && null !== val)) {
            [key, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.Key = () => {
            return key;
        };
    }
    return true;
}
function InputBoxBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["value"], undefined !== it["value"]];
    if (ok) {
        let value;
        if ((undefined !== val && null !== val)) {
            [value, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.value = value;
    }
    [val, ok] = [it["placeholder"], undefined !== it["placeholder"]];
    if (ok) {
        let placeholder;
        if ((undefined !== val && null !== val)) {
            [placeholder, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.placeholder = placeholder;
    }
    [val, ok] = [it["password"], undefined !== it["password"]];
    if (ok) {
        let password;
        if ((undefined !== val && null !== val)) {
            [password, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.password = password;
    }
    [val, ok] = [it["prompt"], undefined !== it["prompt"]];
    if (ok) {
        let prompt;
        if ((undefined !== val && null !== val)) {
            [prompt, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.prompt = prompt;
    }
    [val, ok] = [it["validationMessage"], undefined !== it["validationMessage"]];
    if (ok) {
        let validationMessage;
        if ((undefined !== val && null !== val)) {
            [validationMessage, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.validationMessage = validationMessage;
    }
    [val, ok] = [it["title"], undefined !== it["title"]];
    if (ok) {
        let title;
        if ((undefined !== val && null !== val)) {
            [title, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.title = title;
    }
    [val, ok] = [it["step"], undefined !== it["step"]];
    if (ok) {
        let step;
        if ((undefined !== val && null !== val)) {
            let _step_;
            [_step_, ok] = [val, typeof val === "number"];
            if (!ok) {
                return false;
            }
            step = _step_;
        }
        this.step = step;
    }
    [val, ok] = [it["totalSteps"], undefined !== it["totalSteps"]];
    if (ok) {
        let totalSteps;
        if ((undefined !== val && null !== val)) {
            let _totalSteps_;
            [_totalSteps_, ok] = [val, typeof val === "number"];
            if (!ok) {
                return false;
            }
            totalSteps = _totalSteps_;
        }
        this.totalSteps = totalSteps;
    }
    [val, ok] = [it["enabled"], undefined !== it["enabled"]];
    if (ok) {
        let enabled;
        if ((undefined !== val && null !== val)) {
            [enabled, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.enabled = enabled;
    }
    [val, ok] = [it["busy"], undefined !== it["busy"]];
    if (ok) {
        let busy;
        if ((undefined !== val && null !== val)) {
            [busy, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.busy = busy;
    }
    [val, ok] = [it["ignoreFocusOut"], undefined !== it["ignoreFocusOut"]];
    if (ok) {
        let ignoreFocusOut;
        if ((undefined !== val && null !== val)) {
            [ignoreFocusOut, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.ignoreFocusOut = ignoreFocusOut;
    }
    return true;
}
function QuickPickBag_loadFromJsonish(payload) {
    let it;
    let ok;
    let val;
    [it, ok] = [payload, typeof payload === "object"];
    if (!ok) {
        return false;
    }
    [val, ok] = [it["value"], undefined !== it["value"]];
    if (ok) {
        let value;
        if ((undefined !== val && null !== val)) {
            [value, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.value = value;
    }
    [val, ok] = [it["placeholder"], undefined !== it["placeholder"]];
    if (ok) {
        let placeholder;
        if ((undefined !== val && null !== val)) {
            [placeholder, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.placeholder = placeholder;
    }
    [val, ok] = [it["items"], undefined !== it["items"]];
    if (ok) {
        let items;
        if ((undefined !== val && null !== val)) {
            let __coll__items;
            [__coll__items, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            items = new Array(__coll__items.length);
            let __idx__items;
            __idx__items = 0;
            for (const __item__items of __coll__items) {
                let __val__items;
                __val__items = newQuickPickItem();
                ok = __val__items.loadFromJsonish(__item__items);
                if (!ok) {
                    return false;
                }
                items[__idx__items] = __val__items;
                __idx__items = __idx__items + 1;
            }
        }
        this.items = items;
    }
    [val, ok] = [it["canSelectMany"], undefined !== it["canSelectMany"]];
    if (ok) {
        let canSelectMany;
        if ((undefined !== val && null !== val)) {
            [canSelectMany, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.canSelectMany = canSelectMany;
    }
    [val, ok] = [it["matchOnDescription"], undefined !== it["matchOnDescription"]];
    if (ok) {
        let matchOnDescription;
        if ((undefined !== val && null !== val)) {
            [matchOnDescription, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.matchOnDescription = matchOnDescription;
    }
    [val, ok] = [it["matchOnDetail"], undefined !== it["matchOnDetail"]];
    if (ok) {
        let matchOnDetail;
        if ((undefined !== val && null !== val)) {
            [matchOnDetail, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.matchOnDetail = matchOnDetail;
    }
    [val, ok] = [it["activeItems"], undefined !== it["activeItems"]];
    if (ok) {
        let activeItems;
        if ((undefined !== val && null !== val)) {
            let __coll__activeItems;
            [__coll__activeItems, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            activeItems = new Array(__coll__activeItems.length);
            let __idx__activeItems;
            __idx__activeItems = 0;
            for (const __item__activeItems of __coll__activeItems) {
                let __val__activeItems;
                __val__activeItems = newQuickPickItem();
                ok = __val__activeItems.loadFromJsonish(__item__activeItems);
                if (!ok) {
                    return false;
                }
                activeItems[__idx__activeItems] = __val__activeItems;
                __idx__activeItems = __idx__activeItems + 1;
            }
        }
        this.activeItems = activeItems;
    }
    [val, ok] = [it["selectedItems"], undefined !== it["selectedItems"]];
    if (ok) {
        let selectedItems;
        if ((undefined !== val && null !== val)) {
            let __coll__selectedItems;
            [__coll__selectedItems, ok] = [val, (typeof val === "object") && (typeof val["length"] === "number")];
            if (!ok) {
                return false;
            }
            selectedItems = new Array(__coll__selectedItems.length);
            let __idx__selectedItems;
            __idx__selectedItems = 0;
            for (const __item__selectedItems of __coll__selectedItems) {
                let __val__selectedItems;
                __val__selectedItems = newQuickPickItem();
                ok = __val__selectedItems.loadFromJsonish(__item__selectedItems);
                if (!ok) {
                    return false;
                }
                selectedItems[__idx__selectedItems] = __val__selectedItems;
                __idx__selectedItems = __idx__selectedItems + 1;
            }
        }
        this.selectedItems = selectedItems;
    }
    [val, ok] = [it["title"], undefined !== it["title"]];
    if (ok) {
        let title;
        if ((undefined !== val && null !== val)) {
            [title, ok] = [val, typeof val === "string"];
            if (!ok) {
                return false;
            }
        }
        this.title = title;
    }
    [val, ok] = [it["step"], undefined !== it["step"]];
    if (ok) {
        let step;
        if ((undefined !== val && null !== val)) {
            let _step_;
            [_step_, ok] = [val, typeof val === "number"];
            if (!ok) {
                return false;
            }
            step = _step_;
        }
        this.step = step;
    }
    [val, ok] = [it["totalSteps"], undefined !== it["totalSteps"]];
    if (ok) {
        let totalSteps;
        if ((undefined !== val && null !== val)) {
            let _totalSteps_;
            [_totalSteps_, ok] = [val, typeof val === "number"];
            if (!ok) {
                return false;
            }
            totalSteps = _totalSteps_;
        }
        this.totalSteps = totalSteps;
    }
    [val, ok] = [it["enabled"], undefined !== it["enabled"]];
    if (ok) {
        let enabled;
        if ((undefined !== val && null !== val)) {
            [enabled, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.enabled = enabled;
    }
    [val, ok] = [it["busy"], undefined !== it["busy"]];
    if (ok) {
        let busy;
        if ((undefined !== val && null !== val)) {
            [busy, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.busy = busy;
    }
    [val, ok] = [it["ignoreFocusOut"], undefined !== it["ignoreFocusOut"]];
    if (ok) {
        let ignoreFocusOut;
        if ((undefined !== val && null !== val)) {
            [ignoreFocusOut, ok] = [val, typeof val === "boolean"];
            if (!ok) {
                return false;
            }
        }
        this.ignoreFocusOut = ignoreFocusOut;
    }
    return true;
}
