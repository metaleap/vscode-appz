"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-nodesjs.ts via github.com/metaleap/vscode-appz/src/gen/main.ts
const aux_1 = require("./aux");
/**
 * Options to configure the behavior of the message.

 */
MessageOptions: class {
}
JSON;
FLAGS: {
    "Name";
    "modal", "Required";
    false, "Excluded";
    false;
}
Modal: boolean;
/**
 * Represents an action that is shown with an information, warning, or
 * error message.

 */
MessageItem: class {
}
JSON;
FLAGS: {
    "Name";
    "title", "Required";
    true, "Excluded";
    false;
}
Title: string;
JSON;
FLAGS: {
    "Name";
    "isCloseAffordance", "Required";
    false, "Excluded";
    false;
}
IsCloseAffordance: boolean;
JSON;
FLAGS: {
    "Name";
    "my", "Required";
    false, "Excluded";
    false;
}
My: {
    [_, string];
    any;
}
/**
 * Options to configure the behavior of the input box UI.

 */
InputBoxOptions: class {
}
JSON;
FLAGS: {
    "Name";
    "value", "Required";
    false, "Excluded";
    false;
}
Value: string;
JSON;
FLAGS: {
    "Name";
    "valueSelection", "Required";
    false, "Excluded";
    false;
}
ValueSelection: [number, number];
JSON;
FLAGS: {
    "Name";
    "prompt", "Required";
    false, "Excluded";
    false;
}
Prompt: string;
JSON;
FLAGS: {
    "Name";
    "placeHolder", "Required";
    false, "Excluded";
    false;
}
PlaceHolder: string;
JSON;
FLAGS: {
    "Name";
    "password", "Required";
    false, "Excluded";
    false;
}
Password: boolean;
JSON;
FLAGS: {
    "Name";
    "ignoreFocusOut", "Required";
    false, "Excluded";
    false;
}
IgnoreFocusOut: boolean;
JSON;
FLAGS: {
    "Name";
    "validateInput", "Required";
    false, "Excluded";
    true;
}
ValidateInput: (_) => string;
JSON;
FLAGS: {
    "Name";
    "validateInput_AppzFuncId", "Required";
    false, "Excluded";
    false;
}
ValidateInput_AppzFuncId: string;
/**
 * Options to configure the behavior of the quick pick UI.

 */
QuickPickOptions: class {
}
JSON;
FLAGS: {
    "Name";
    "matchOnDescription", "Required";
    false, "Excluded";
    false;
}
MatchOnDescription: boolean;
JSON;
FLAGS: {
    "Name";
    "matchOnDetail", "Required";
    false, "Excluded";
    false;
}
MatchOnDetail: boolean;
JSON;
FLAGS: {
    "Name";
    "placeHolder", "Required";
    false, "Excluded";
    false;
}
PlaceHolder: string;
JSON;
FLAGS: {
    "Name";
    "ignoreFocusOut", "Required";
    false, "Excluded";
    false;
}
IgnoreFocusOut: boolean;
JSON;
FLAGS: {
    "Name";
    "canPickMany", "Required";
    false, "Excluded";
    false;
}
CanPickMany: boolean;
JSON;
FLAGS: {
    "Name";
    "onDidSelectItem", "Required";
    false, "Excluded";
    true;
}
OnDidSelectItem: (_) => any;
JSON;
FLAGS: {
    "Name";
    "onDidSelectItem_AppzFuncId", "Required";
    false, "Excluded";
    false;
}
OnDidSelectItem_AppzFuncId: string;
/**
 * Represents an item that can be selected from
 * a list of items.

 */
QuickPickItem: class {
}
JSON;
FLAGS: {
    "Name";
    "label", "Required";
    true, "Excluded";
    false;
}
Label: string;
JSON;
FLAGS: {
    "Name";
    "description", "Required";
    false, "Excluded";
    false;
}
Description: string;
JSON;
FLAGS: {
    "Name";
    "detail", "Required";
    false, "Excluded";
    false;
}
Detail: string;
JSON;
FLAGS: {
    "Name";
    "picked", "Required";
    false, "Excluded";
    false;
}
Picked: boolean;
JSON;
FLAGS: {
    "Name";
    "alwaysShow", "Required";
    false, "Excluded";
    false;
}
AlwaysShow: boolean;
JSON;
FLAGS: {
    "Name";
    "my", "Required";
    false, "Excluded";
    false;
}
My: {
    [_, string];
    any;
}
/**
 * Options to configure the behaviour of a file save dialog.

 */
SaveDialogOptions: class {
}
JSON;
FLAGS: {
    "Name";
    "defaultUri", "Required";
    false, "Excluded";
    false;
}
DefaultUri: string;
JSON;
FLAGS: {
    "Name";
    "saveLabel", "Required";
    false, "Excluded";
    false;
}
SaveLabel: string;
JSON;
FLAGS: {
    "Name";
    "filters", "Required";
    false, "Excluded";
    false;
}
Filters: {
    [_, string];
    string[];
}
/**
 * Options to configure the behaviour of a file open dialog.
 *
 * * Note 1: A dialog can select files, folders, or both. This is not true for Windows
 * which enforces to open either files or folder, but *not both*.
 * * Note 2: Explicitly setting `canSelectFiles` and `canSelectFolders` to `false` is futile
 * and the editor then silently adjusts the options to select files.

 */
OpenDialogOptions: class {
}
JSON;
FLAGS: {
    "Name";
    "defaultUri", "Required";
    false, "Excluded";
    false;
}
DefaultUri: string;
JSON;
FLAGS: {
    "Name";
    "openLabel", "Required";
    false, "Excluded";
    false;
}
OpenLabel: string;
JSON;
FLAGS: {
    "Name";
    "canSelectFiles", "Required";
    false, "Excluded";
    false;
}
CanSelectFiles: boolean;
JSON;
FLAGS: {
    "Name";
    "canSelectFolders", "Required";
    false, "Excluded";
    false;
}
CanSelectFolders: boolean;
JSON;
FLAGS: {
    "Name";
    "canSelectMany", "Required";
    false, "Excluded";
    false;
}
CanSelectMany: boolean;
JSON;
FLAGS: {
    "Name";
    "filters", "Required";
    false, "Excluded";
    false;
}
Filters: {
    [_, string];
    string[];
}
/**
 * Options to configure the behaviour of the [workspace folder](#WorkspaceFolder) pick UI.

 */
WorkspaceFolderPickOptions: class {
}
JSON;
FLAGS: {
    "Name";
    "placeHolder", "Required";
    false, "Excluded";
    false;
}
PlaceHolder: string;
JSON;
FLAGS: {
    "Name";
    "ignoreFocusOut", "Required";
    false, "Excluded";
    false;
}
IgnoreFocusOut: boolean;
/**
 * A workspace folder is one of potentially many roots opened by the editor. All workspace folders
 * are equal which means there is no notion of an active or master workspace folder.

 */
WorkspaceFolder: class {
}
JSON;
FLAGS: {
    "Name";
    "uri", "Required";
    true, "Excluded";
    false;
}
Uri: string;
JSON;
FLAGS: {
    "Name";
    "name", "Required";
    true, "Excluded";
    false;
}
Name: string;
JSON;
FLAGS: {
    "Name";
    "index", "Required";
    true, "Excluded";
    false;
}
Index: number;
/**
 * Represents the state of a window.

 */
WindowState: class {
}
JSON;
FLAGS: {
    "Name";
    "focused", "Required";
    true, "Excluded";
    false;
}
Focused: boolean;
/**
 * An event describing a change to the set of [workspace folders](#workspace.workspaceFolders).

 */
WorkspaceFoldersChangeEvent: class {
}
JSON;
FLAGS: {
    "Name";
    "added", "Required";
    true, "Excluded";
    false;
}
Added: WorkspaceFolder[];
JSON;
FLAGS: {
    "Name";
    "removed", "Required";
    true, "Excluded";
    false;
}
Removed: WorkspaceFolder[];
/**
 * The event that is fired when diagnostics change.

 */
DiagnosticChangeEvent: class {
}
JSON;
FLAGS: {
    "Name";
    "uris", "Required";
    true, "Excluded";
    false;
}
Uris: string[];
/**
 * Namespace describing the environment the editor runs in.

 */
EnvProperties: class {
}
JSON;
FLAGS: {
    "Name";
    "appName", "Required";
    false, "Excluded";
    false;
}
AppName: string;
JSON;
FLAGS: {
    "Name";
    "appRoot", "Required";
    false, "Excluded";
    false;
}
AppRoot: string;
JSON;
FLAGS: {
    "Name";
    "language", "Required";
    false, "Excluded";
    false;
}
Language: string;
JSON;
FLAGS: {
    "Name";
    "machineId", "Required";
    false, "Excluded";
    false;
}
MachineId: string;
JSON;
FLAGS: {
    "Name";
    "remoteName", "Required";
    false, "Excluded";
    false;
}
RemoteName: string;
JSON;
FLAGS: {
    "Name";
    "sessionId", "Required";
    false, "Excluded";
    false;
}
SessionId: string;
JSON;
FLAGS: {
    "Name";
    "shell", "Required";
    false, "Excluded";
    false;
}
Shell: string;
JSON;
FLAGS: {
    "Name";
    "uriScheme", "Required";
    false, "Excluded";
    false;
}
UriScheme: string;
/**
 * Namespace for dealing with the current workspace. A workspace is the representation
 * of the folder that has been opened. There is no workspace when just a file but not a
 * folder has been opened.
 *
 * The workspace offers support for [listening](#workspace.createFileSystemWatcher) to fs
 * events and for [finding](#workspace.findFiles) files. Both perform well and run _outside_
 * the editor-process so that they should be always used instead of nodejs-equivalents.

 */
WorkspaceProperties: class {
}
JSON;
FLAGS: {
    "Name";
    "name", "Required";
    false, "Excluded";
    false;
}
Name: string;
JSON;
FLAGS: {
    "Name";
    "workspaceFile", "Required";
    false, "Excluded";
    false;
}
WorkspaceFile: string;
JSON;
FLAGS: {
    "Name";
    "workspaceFolders", "Required";
    false, "Excluded";
    false;
}
WorkspaceFolders: WorkspaceFolder[];
Vscode·Window: (- > Window);
return ((this));
(implWindow);
Vscode·Env: (- > Env);
return ((this));
(implEnv);
Vscode·Workspace: (- > Workspace);
return ((this));
(implWorkspace);
Vscode·Languages: (- > Languages);
return ((this));
(implLanguages);
Vscode·Extensions: (- > Extensions);
return ((this));
(implExtensions);
Vscode·Commands: (- > Commands);
return ((this));
(implCommands);
Window·ShowInformationMessage1: (message) => ;
- > items;
string[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showInformationMessage1";
msg.Data = dict·new(2);
msg.Data;
message;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowInformationMessage2: (message) => ;
- > options;
MessageOptions -  > items;
string[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showInformationMessage2";
msg.Data = dict·new(3);
msg.Data;
message;
msg.Data;
options;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowInformationMessage3: (message) => ;
- > items;
MessageItem[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showInformationMessage3";
msg.Data = dict·new(2);
msg.Data;
message;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
MessageItem;
if ( =  ? payload : )
    result = MessageItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·ShowInformationMessage4: (message) => ;
- > options;
MessageOptions -  > items;
MessageItem[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showInformationMessage4";
msg.Data = dict·new(3);
msg.Data;
message;
msg.Data;
options;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
MessageItem;
if ( =  ? payload : )
    result = MessageItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·ShowWarningMessage1: (message) => ;
- > items;
string[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showWarningMessage1";
msg.Data = dict·new(2);
msg.Data;
message;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowWarningMessage2: (message) => ;
- > options;
MessageOptions -  > items;
string[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showWarningMessage2";
msg.Data = dict·new(3);
msg.Data;
message;
msg.Data;
options;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowWarningMessage3: (message) => ;
- > items;
MessageItem[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showWarningMessage3";
msg.Data = dict·new(2);
msg.Data;
message;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
MessageItem;
if ( =  ? payload : )
    result = MessageItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·ShowWarningMessage4: (message) => ;
- > options;
MessageOptions -  > items;
MessageItem[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showWarningMessage4";
msg.Data = dict·new(3);
msg.Data;
message;
msg.Data;
options;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
MessageItem;
if ( =  ? payload : )
    result = MessageItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·ShowErrorMessage1: (message) => ;
- > items;
string[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showErrorMessage1";
msg.Data = dict·new(2);
msg.Data;
message;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowErrorMessage2: (message) => ;
- > options;
MessageOptions -  > items;
string[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showErrorMessage2";
msg.Data = dict·new(3);
msg.Data;
message;
msg.Data;
options;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowErrorMessage3: (message) => ;
- > items;
MessageItem[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showErrorMessage3";
msg.Data = dict·new(2);
msg.Data;
message;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
MessageItem;
if ( =  ? payload : )
    result = MessageItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·ShowErrorMessage4: (message) => ;
- > options;
MessageOptions -  > items;
MessageItem[] -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showErrorMessage4";
msg.Data = dict·new(3);
msg.Data;
message;
msg.Data;
options;
msg.Data;
items;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
MessageItem;
if ( =  ? payload : )
    result = MessageItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·ShowInputBox: (options) => ;
- > token;
Cancel -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showInputBox";
msg.Data = dict·new(2);
var fnids;
of;
string[];
fnids = [string];
new (1);
if ( =  ? options : )
    options.ValidateInput_AppzFuncId = "";
var fn;
of(_, string);
string;
fn = options.ValidateInput;
if ( =  ? fn : )
    lock;
this;
options.ValidateInput_AppzFuncId = this.nextFuncId();
fnids·add(options.ValidateInput_AppzFuncId);
this.cbOther;
(args) => ;
- > [any, boolean];
if (1 != args·len)
    return [null, false];
else
    var ok;
of;
boolean;
var __0;
of;
string;
if ( =  ? args : )
[__0, ok] = ((args));
(string);
if (!ok)
    return [null, false];
return [fn(__0), true];
msg.Data;
options;
if ( =  ? token : )
    token.impl = this.Impl();
if ("" == token.fnId)
    lock;
this;
token.fnId = this.nextFuncId();
msg.Data;
token.fnId;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, (payload) => , - > boolean);
if (fnids·len != 0)
    lock;
this;
for (fnid in fnids)
    this.cbOther·del(fnid);
return (( = !on) || on(payload));
Window·ShowQuickPick1: (items) => ;
- > options;
QuickPickOptions -  > token;
Cancel -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showQuickPick1";
msg.Data = dict·new(3);
var fnids;
of;
string[];
fnids = [string];
new (1);
if (true)
    options.OnDidSelectItem_AppzFuncId = "";
var fn;
of(_, QuickPickItem);
any;
fn = options.OnDidSelectItem;
if ( =  ? fn : )
    lock;
this;
options.OnDidSelectItem_AppzFuncId = this.nextFuncId();
fnids·add(options.OnDidSelectItem_AppzFuncId);
this.cbOther;
(args) => ;
- > [any, boolean];
if (1 != args·len)
    return [null, false];
else
    var ok;
of;
boolean;
var __0;
of;
QuickPickItem;
if ( =  ? args : )
__0 = QuickPickItem·new;
ok = __0.populateFrom(args);
if (!ok)
    return [null, false];
else
    return [null, false];
return [fn(__0), true];
msg.Data;
items;
options.CanPickMany = true;
msg.Data;
options;
if ( =  ? token : )
    token.impl = this.Impl();
if ("" == token.fnId)
    lock;
this;
token.fnId = this.nextFuncId();
msg.Data;
token.fnId;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [string];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
string[__val__result, ok] = ((__item__result));
(string);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, (payload) => , - > boolean);
if (fnids·len != 0)
    lock;
this;
for (fnid in fnids)
    this.cbOther·del(fnid);
return (( = !on) || on(payload));
Window·ShowQuickPick2: (items) => ;
- > options;
QuickPickOptions -  > token;
Cancel -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showQuickPick2";
msg.Data = dict·new(3);
var fnids;
of;
string[];
fnids = [string];
new (1);
if ( =  ? options : )
    options.OnDidSelectItem_AppzFuncId = "";
var fn;
of(_, QuickPickItem);
any;
fn = options.OnDidSelectItem;
if ( =  ? fn : )
    lock;
this;
options.OnDidSelectItem_AppzFuncId = this.nextFuncId();
fnids·add(options.OnDidSelectItem_AppzFuncId);
this.cbOther;
(args) => ;
- > [any, boolean];
if (1 != args·len)
    return [null, false];
else
    var ok;
of;
boolean;
var __0;
of;
QuickPickItem;
if ( =  ? args : )
__0 = QuickPickItem·new;
ok = __0.populateFrom(args);
if (!ok)
    return [null, false];
else
    return [null, false];
return [fn(__0), true];
msg.Data;
items;
msg.Data;
options;
if ( =  ? token : )
    token.impl = this.Impl();
if ("" == token.fnId)
    lock;
this;
token.fnId = this.nextFuncId();
msg.Data;
token.fnId;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, (payload) => , - > boolean);
if (fnids·len != 0)
    lock;
this;
for (fnid in fnids)
    this.cbOther·del(fnid);
return (( = !on) || on(payload));
Window·ShowQuickPick3: (items) => ;
- > options;
QuickPickOptions -  > token;
Cancel -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showQuickPick3";
msg.Data = dict·new(3);
var fnids;
of;
string[];
fnids = [string];
new (1);
if (true)
    options.OnDidSelectItem_AppzFuncId = "";
var fn;
of(_, QuickPickItem);
any;
fn = options.OnDidSelectItem;
if ( =  ? fn : )
    lock;
this;
options.OnDidSelectItem_AppzFuncId = this.nextFuncId();
fnids·add(options.OnDidSelectItem_AppzFuncId);
this.cbOther;
(args) => ;
- > [any, boolean];
if (1 != args·len)
    return [null, false];
else
    var ok;
of;
boolean;
var __0;
of;
QuickPickItem;
if ( =  ? args : )
__0 = QuickPickItem·new;
ok = __0.populateFrom(args);
if (!ok)
    return [null, false];
else
    return [null, false];
return [fn(__0), true];
msg.Data;
items;
options.CanPickMany = true;
msg.Data;
options;
if ( =  ? token : )
    token.impl = this.Impl();
if ("" == token.fnId)
    lock;
this;
token.fnId = this.nextFuncId();
msg.Data;
token.fnId;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
QuickPickItem[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [QuickPickItem];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
QuickPickItem;
__val__result = QuickPickItem·new;
ok = __val__result.populateFrom(__item__result);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, (payload) => , - > boolean);
if (fnids·len != 0)
    lock;
this;
for (fnid in fnids)
    this.cbOther·del(fnid);
return (( = !on) || on(payload));
Window·ShowQuickPick4: (items) => ;
- > options;
QuickPickOptions -  > token;
Cancel -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showQuickPick4";
msg.Data = dict·new(3);
var fnids;
of;
string[];
fnids = [string];
new (1);
if ( =  ? options : )
    options.OnDidSelectItem_AppzFuncId = "";
var fn;
of(_, QuickPickItem);
any;
fn = options.OnDidSelectItem;
if ( =  ? fn : )
    lock;
this;
options.OnDidSelectItem_AppzFuncId = this.nextFuncId();
fnids·add(options.OnDidSelectItem_AppzFuncId);
this.cbOther;
(args) => ;
- > [any, boolean];
if (1 != args·len)
    return [null, false];
else
    var ok;
of;
boolean;
var __0;
of;
QuickPickItem;
if ( =  ? args : )
__0 = QuickPickItem·new;
ok = __0.populateFrom(args);
if (!ok)
    return [null, false];
else
    return [null, false];
return [fn(__0), true];
msg.Data;
items;
msg.Data;
options;
if ( =  ? token : )
    token.impl = this.Impl();
if ("" == token.fnId)
    lock;
this;
token.fnId = this.nextFuncId();
msg.Data;
token.fnId;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
QuickPickItem;
if ( =  ? payload : )
    result = QuickPickItem·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, (payload) => , - > boolean);
if (fnids·len != 0)
    lock;
this;
for (fnid in fnids)
    this.cbOther·del(fnid);
return (( = !on) || on(payload));
Window·SetStatusBarMessage1: (text) => ;
- > hideAfterTimeout;
number -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.setStatusBarMessage1";
msg.Data = dict·new(2);
msg.Data;
text;
msg.Data;
hideAfterTimeout;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
Disposable;
if ( =  ? payload : )
    result = Disposable·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result.bind(this.Impl(), ""));
return true;
this.send(msg, on);
Window·SetStatusBarMessage2: (text) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.setStatusBarMessage2";
msg.Data = dict·new(1);
msg.Data;
text;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
Disposable;
if ( =  ? payload : )
    result = Disposable·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result.bind(this.Impl(), ""));
return true;
this.send(msg, on);
Window·ShowSaveDialog: (options) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showSaveDialog";
msg.Data = dict·new(1);
msg.Data;
options;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Window·ShowOpenDialog: (options) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showOpenDialog";
msg.Data = dict·new(1);
msg.Data;
options;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [string];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
string[__val__result, ok] = ((__item__result));
(string);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, on);
Window·ShowWorkspaceFolderPick: (options) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.showWorkspaceFolderPick";
msg.Data = dict·new(1);
msg.Data;
options;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
WorkspaceFolder;
if ( =  ? payload : )
    result = WorkspaceFolder·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·State: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.state";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
WindowState;
if ( =  ? payload : )
    result = WindowState·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Window·OnDidChangeWindowState: (listener) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "window.onDidChangeWindowState";
msg.Data = dict·new(1);
var _fnid_listener;
of;
string;
if ( = !listener)
    OnError(this, "Window.OnDidChangeWindowState: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
return;
_fnid_listener = this.nextSub((args) => , - > boolean);
var ok;
of;
boolean;
if (1 != args·len)
    return ok;
var _a_0_;
of;
WindowState;
_a_0_ = WindowState·new;
ok = _a_0_.populateFrom(args);
if (!ok)
    return false;
listener(_a_0_);
return true;
msg.Data;
_fnid_listener;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
Disposable;
if ( =  ? payload : )
    result = Disposable·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result.bind(this.Impl(), _fnid_listener));
return true;
this.send(msg, on);
Env·OpenExternal: (target) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.openExternal";
msg.Data = dict·new(1);
msg.Data;
target;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
boolean;
if ( =  ? payload : )
    [result, ok] = ((payload));
(boolean);
if (!ok)
    return false;
else
    return false;
then(result);
return true;
this.send(msg, on);
Env·AppName: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.appName";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·AppRoot: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.appRoot";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·Language: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.language";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·MachineId: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.machineId";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·RemoteName: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.remoteName";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Env·SessionId: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.sessionId";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·Shell: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.shell";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·UriScheme: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.uriScheme";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    [result, ok] = ((payload));
(string);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Env·Properties: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "env.Properties";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
EnvProperties;
if ( =  ? payload : )
    result = EnvProperties·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result);
return true;
this.send(msg, on);
Workspace·Name: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.name";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Workspace·WorkspaceFile: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.workspaceFile";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Workspace·SaveAll: (includeUntitled) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.saveAll";
msg.Data = dict·new(1);
msg.Data;
includeUntitled;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
boolean;
if ( =  ? payload : )
    [result, ok] = ((payload));
(boolean);
if (!ok)
    return false;
else
    return false;
then(result);
return true;
this.send(msg, on);
Workspace·OnDidChangeWorkspaceFolders: (listener) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.onDidChangeWorkspaceFolders";
msg.Data = dict·new(1);
var _fnid_listener;
of;
string;
if ( = !listener)
    OnError(this, "Workspace.OnDidChangeWorkspaceFolders: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
return;
_fnid_listener = this.nextSub((args) => , - > boolean);
var ok;
of;
boolean;
if (1 != args·len)
    return ok;
var _a_0_;
of;
WorkspaceFoldersChangeEvent;
_a_0_ = WorkspaceFoldersChangeEvent·new;
ok = _a_0_.populateFrom(args);
if (!ok)
    return false;
listener(_a_0_);
return true;
msg.Data;
_fnid_listener;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
Disposable;
if ( =  ? payload : )
    result = Disposable·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result.bind(this.Impl(), _fnid_listener));
return true;
this.send(msg, on);
Workspace·GetWorkspaceFolder: (uri) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.getWorkspaceFolder";
msg.Data = dict·new(1);
msg.Data;
uri;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
WorkspaceFolder;
if ( =  ? payload : )
    result = WorkspaceFolder·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
then(result);
return true;
this.send(msg, on);
Workspace·WorkspaceFolders: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.workspaceFolders";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
WorkspaceFolder[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [WorkspaceFolder];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
WorkspaceFolder;
__val__result = WorkspaceFolder·new;
ok = __val__result.populateFrom(__item__result);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, on);
Workspace·FindFiles: (include) => ;
- > exclude;
GlobPattern -  > maxResults;
number -  > token;
Cancel -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.findFiles";
msg.Data = dict·new(4);
msg.Data;
include;
msg.Data;
exclude;
msg.Data;
maxResults;
if ( =  ? token : )
    token.impl = this.Impl();
if ("" == token.fnId)
    lock;
this;
token.fnId = this.nextFuncId();
msg.Data;
token.fnId;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [string];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
string[__val__result, ok] = ((__item__result));
(string);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, on);
Workspace·AsRelativePath: (pathOrUri) => ;
- > includeWorkspaceFolder;
boolean -  > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.asRelativePath";
msg.Data = dict·new(2);
msg.Data;
pathOrUri;
msg.Data;
includeWorkspaceFolder;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string;
if ( =  ? payload : )
    var _result_;
of;
string[_result_, ok] = ((payload));
(string);
if (!ok)
    return false;
result = ( & _result_);
then(result);
return true;
this.send(msg, on);
Workspace·Properties: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "workspace.Properties";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
WorkspaceProperties;
if ( =  ? payload : )
    result = WorkspaceProperties·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result);
return true;
this.send(msg, on);
Languages·GetLanguages: (then) => ;
- > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "languages.getLanguages";
msg.Data = dict·new(0);
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [string];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
string[__val__result, ok] = ((__item__result));
(string);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, on);
Languages·OnDidChangeDiagnostics: (listener) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "languages.onDidChangeDiagnostics";
msg.Data = dict·new(1);
var _fnid_listener;
of;
string;
if ( = !listener)
    OnError(this, "Languages.OnDidChangeDiagnostics: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
return;
_fnid_listener = this.nextSub((args) => , - > boolean);
var ok;
of;
boolean;
if (1 != args·len)
    return ok;
var _a_0_;
of;
DiagnosticChangeEvent;
_a_0_ = DiagnosticChangeEvent·new;
ok = _a_0_.populateFrom(args);
if (!ok)
    return false;
listener(_a_0_);
return true;
msg.Data;
_fnid_listener;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
Disposable;
if ( =  ? payload : )
    result = Disposable·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result.bind(this.Impl(), _fnid_listener));
return true;
this.send(msg, on);
Extensions·OnDidChange: (listener) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "extensions.onDidChange";
msg.Data = dict·new(1);
var _fnid_listener;
of;
string;
if ( = !listener)
    OnError(this, "Extensions.OnDidChange: the 'listener' arg (which is not optional but required) was not passed by the caller", null);
return;
_fnid_listener = this.nextSub((args) => , - > boolean);
var ok;
of;
boolean;
if (0 != args·len)
    return ok;
listener();
return true;
msg.Data;
_fnid_listener;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
Disposable;
if ( =  ? payload : )
    result = Disposable·new;
ok = result.populateFrom(payload);
if (!ok)
    return false;
else
    return false;
then(result.bind(this.Impl(), _fnid_listener));
return true;
this.send(msg, on);
Commands·GetCommands: (filterInternal) => ;
- > then;
(_) => void - > void ;
var msg;
of;
aux_1.ipcMsg;
msg = ipcMsg·new;
msg.QName = "commands.getCommands";
msg.Data = dict·new(1);
msg.Data;
filterInternal;
var on;
of(_, any);
boolean;
if ( =  ? then : )
    on = (payload) => ;
- > boolean;
var ok;
of;
boolean;
var result;
of;
string[];
if ( =  ? payload : )
    var __coll__result;
of;
any[][__coll__result, ok] = ((payload));
(any[]);
if (!ok)
    return false;
result = [string];
new (__coll__result·len);
var __idx__result;
of;
number;
__idx__result = 0;
for (__item__result in __coll__result)
    var __val__result;
of;
string[__val__result, ok] = ((__item__result));
(string);
if (!ok)
    return false;
result;
__val__result;
__idx__result = (__idx__result + 1);
then(result);
return true;
this.send(msg, on);
MessageItem·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"title";
if (ok)
    var title;
of;
string;
if ( =  ? val : )
    [title, ok] = ((val));
(string);
if (!ok)
    return false;
this.Title = title;
return false[val, ok] = it;
"isCloseAffordance";
if (ok)
    var isCloseAffordance;
of;
boolean;
if ( =  ? val : )
    var _isCloseAffordance_;
of;
boolean[_isCloseAffordance_, ok] = ((val));
(boolean);
if (!ok)
    return false;
isCloseAffordance = ( & _isCloseAffordance_);
this.IsCloseAffordance = isCloseAffordance[val, ok] = it;
"my";
if (ok)
    var my;
of;
{
    [_, string];
    any;
}
if ( =  ? val : )
    [my, ok] = ((val));
({ [_]: string, any });
if (!ok)
    return false;
this.My = my;
return true;
QuickPickItem·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"label";
if (ok)
    var label;
of;
string;
if ( =  ? val : )
    [label, ok] = ((val));
(string);
if (!ok)
    return false;
this.Label = label;
return false[val, ok] = it;
"description";
if (ok)
    var description;
of;
string;
if ( =  ? val : )
    var _description_;
of;
string[_description_, ok] = ((val));
(string);
if (!ok)
    return false;
description = ( & _description_);
this.Description = description[val, ok] = it;
"detail";
if (ok)
    var detail;
of;
string;
if ( =  ? val : )
    var _detail_;
of;
string[_detail_, ok] = ((val));
(string);
if (!ok)
    return false;
detail = ( & _detail_);
this.Detail = detail[val, ok] = it;
"picked";
if (ok)
    var picked;
of;
boolean;
if ( =  ? val : )
    var _picked_;
of;
boolean[_picked_, ok] = ((val));
(boolean);
if (!ok)
    return false;
picked = ( & _picked_);
this.Picked = picked[val, ok] = it;
"alwaysShow";
if (ok)
    var alwaysShow;
of;
boolean;
if ( =  ? val : )
    var _alwaysShow_;
of;
boolean[_alwaysShow_, ok] = ((val));
(boolean);
if (!ok)
    return false;
alwaysShow = ( & _alwaysShow_);
this.AlwaysShow = alwaysShow[val, ok] = it;
"my";
if (ok)
    var my;
of;
{
    [_, string];
    any;
}
if ( =  ? val : )
    [my, ok] = ((val));
({ [_]: string, any });
if (!ok)
    return false;
this.My = my;
return true;
WorkspaceFolder·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"uri";
if (ok)
    var uri;
of;
string;
if ( =  ? val : )
    [uri, ok] = ((val));
(string);
if (!ok)
    return false;
this.Uri = uri;
return false[val, ok] = it;
"name";
if (ok)
    var name;
of;
string;
if ( =  ? val : )
    [name, ok] = ((val));
(string);
if (!ok)
    return false;
this.Name = name;
return false[val, ok] = it;
"index";
if (ok)
    var index;
of;
number;
if ( =  ? val : )
    [index, ok] = ((val));
(number);
if (!ok)
    var __index__;
of;
number[__index__, ok] = ((val));
(number);
if (!ok)
    return false;
index = ((__index__));
(number);
this.Index = index;
return false;
return true;
WindowState·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"focused";
if (ok)
    var focused;
of;
boolean;
if ( =  ? val : )
    [focused, ok] = ((val));
(boolean);
if (!ok)
    return false;
this.Focused = focused;
return false;
return true;
EnvProperties·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"appName";
if (ok)
    var appName;
of;
string;
if ( =  ? val : )
    var _appName_;
of;
string[_appName_, ok] = ((val));
(string);
if (!ok)
    return false;
appName = ( & _appName_);
this.AppName = appName[val, ok] = it;
"appRoot";
if (ok)
    var appRoot;
of;
string;
if ( =  ? val : )
    var _appRoot_;
of;
string[_appRoot_, ok] = ((val));
(string);
if (!ok)
    return false;
appRoot = ( & _appRoot_);
this.AppRoot = appRoot[val, ok] = it;
"language";
if (ok)
    var language;
of;
string;
if ( =  ? val : )
    var _language_;
of;
string[_language_, ok] = ((val));
(string);
if (!ok)
    return false;
language = ( & _language_);
this.Language = language[val, ok] = it;
"machineId";
if (ok)
    var machineId;
of;
string;
if ( =  ? val : )
    var _machineId_;
of;
string[_machineId_, ok] = ((val));
(string);
if (!ok)
    return false;
machineId = ( & _machineId_);
this.MachineId = machineId[val, ok] = it;
"remoteName";
if (ok)
    var remoteName;
of;
string;
if ( =  ? val : )
    var _remoteName_;
of;
string[_remoteName_, ok] = ((val));
(string);
if (!ok)
    return false;
remoteName = ( & _remoteName_);
this.RemoteName = remoteName[val, ok] = it;
"sessionId";
if (ok)
    var sessionId;
of;
string;
if ( =  ? val : )
    var _sessionId_;
of;
string[_sessionId_, ok] = ((val));
(string);
if (!ok)
    return false;
sessionId = ( & _sessionId_);
this.SessionId = sessionId[val, ok] = it;
"shell";
if (ok)
    var shell;
of;
string;
if ( =  ? val : )
    var _shell_;
of;
string[_shell_, ok] = ((val));
(string);
if (!ok)
    return false;
shell = ( & _shell_);
this.Shell = shell[val, ok] = it;
"uriScheme";
if (ok)
    var uriScheme;
of;
string;
if ( =  ? val : )
    var _uriScheme_;
of;
string[_uriScheme_, ok] = ((val));
(string);
if (!ok)
    return false;
uriScheme = ( & _uriScheme_);
this.UriScheme = uriScheme;
return true;
WorkspaceFoldersChangeEvent·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"added";
if (ok)
    var added;
of;
WorkspaceFolder[];
if ( =  ? val : )
    var __coll__added;
of;
any[][__coll__added, ok] = ((val));
(any[]);
if (!ok)
    return false;
added = [WorkspaceFolder];
new (__coll__added·len);
var __idx__added;
of;
number;
__idx__added = 0;
for (__item__added in __coll__added)
    var __val__added;
of;
WorkspaceFolder;
__val__added = WorkspaceFolder·new;
ok = __val__added.populateFrom(__item__added);
if (!ok)
    return false;
added;
__val__added;
__idx__added = (__idx__added + 1);
this.Added = added;
return false[val, ok] = it;
"removed";
if (ok)
    var removed;
of;
WorkspaceFolder[];
if ( =  ? val : )
    var __coll__removed;
of;
any[][__coll__removed, ok] = ((val));
(any[]);
if (!ok)
    return false;
removed = [WorkspaceFolder];
new (__coll__removed·len);
var __idx__removed;
of;
number;
__idx__removed = 0;
for (__item__removed in __coll__removed)
    var __val__removed;
of;
WorkspaceFolder;
__val__removed = WorkspaceFolder·new;
ok = __val__removed.populateFrom(__item__removed);
if (!ok)
    return false;
removed;
__val__removed;
__idx__removed = (__idx__removed + 1);
this.Removed = removed;
return false;
return true;
WorkspaceProperties·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"name";
if (ok)
    var name;
of;
string;
if ( =  ? val : )
    var _name_;
of;
string[_name_, ok] = ((val));
(string);
if (!ok)
    return false;
name = ( & _name_);
this.Name = name[val, ok] = it;
"workspaceFile";
if (ok)
    var workspaceFile;
of;
string;
if ( =  ? val : )
    var _workspaceFile_;
of;
string[_workspaceFile_, ok] = ((val));
(string);
if (!ok)
    return false;
workspaceFile = ( & _workspaceFile_);
this.WorkspaceFile = workspaceFile[val, ok] = it;
"workspaceFolders";
if (ok)
    var workspaceFolders;
of;
WorkspaceFolder[];
if ( =  ? val : )
    var __coll__workspaceFolders;
of;
any[][__coll__workspaceFolders, ok] = ((val));
(any[]);
if (!ok)
    return false;
workspaceFolders = [WorkspaceFolder];
new (__coll__workspaceFolders·len);
var __idx__workspaceFolders;
of;
number;
__idx__workspaceFolders = 0;
for (__item__workspaceFolders in __coll__workspaceFolders)
    var __val__workspaceFolders;
of;
WorkspaceFolder;
__val__workspaceFolders = WorkspaceFolder·new;
ok = __val__workspaceFolders.populateFrom(__item__workspaceFolders);
if (!ok)
    return false;
workspaceFolders;
__val__workspaceFolders;
__idx__workspaceFolders = (__idx__workspaceFolders + 1);
this.WorkspaceFolders = workspaceFolders;
return true;
DiagnosticChangeEvent·populateFrom: (payload) => ;
- > boolean;
var it;
of;
{
    [_, string];
    any;
}
var ok;
of;
boolean;
var val;
of;
any[it, ok] = ((payload));
({ [_]: string, any });
if (!ok)
    return false[val, ok] = it;
"uris";
if (ok)
    var uris;
of;
string[];
if ( =  ? val : )
    var __coll__uris;
of;
any[][__coll__uris, ok] = ((val));
(any[]);
if (!ok)
    return false;
uris = [string];
new (__coll__uris·len);
var __idx__uris;
of;
number;
__idx__uris = 0;
for (__item__uris in __coll__uris)
    var __val__uris;
of;
string[__val__uris, ok] = ((__item__uris));
(string);
if (!ok)
    return false;
uris;
__val__uris;
__idx__uris = (__idx__uris + 1);
this.Uris = uris;
return false;
return true;
class implBase {
    constructor(impl) { this.impl = impl; }
    send(msg, on) { this.impl.send(msg, on); }
}
