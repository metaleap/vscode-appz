// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-csharp.ts via github.com/metaleap/vscode-appz/src/gen/main.ts
namespace Vscode
{
    using System;

    public interface IProtocol
    {
        IWindow Window { get; }
    }

    internal partial class impl : IProtocol
    {
        IWindow IProtocol.Window { get { return this; } }
    }

    public class MessageOptions
    {
        public bool Modal;

        public MessageOptions() { }
        public MessageOptions(bool modal) =>
            Modal = modal;
    }

    public class MessageItem
    {
        public string Title;
        public bool IsCloseAffordance;
        public object AppzTag;

        public MessageItem() { }
        public MessageItem(string title, bool isCloseAffordance, object appzTag) =>
            (Title, IsCloseAffordance, AppzTag) = (title, isCloseAffordance, appzTag);
    }

    public class InputBoxOptions
    {
        public string Value;
        public (int, int) ValueSelection;
        public string Prompt;
        public string PlaceHolder;
        public bool Password;
        public bool IgnoreFocusOut;
        public Func<string, string> ValidateInput;

        public InputBoxOptions() { }
        public InputBoxOptions(string value, (int, int) valueSelection, string prompt, string placeHolder, bool password, bool ignoreFocusOut, Func<string, string> validateInput) =>
            (Value, ValueSelection, Prompt, PlaceHolder, Password, IgnoreFocusOut, ValidateInput) = (value, valueSelection, prompt, placeHolder, password, ignoreFocusOut, validateInput);
    }

    public interface IWindow
    {
        void ShowErrorMessage(string message, string[] items, Action<string> andThen = default);
        void ShowErrorMessage(string message, MessageOptions options, string[] items, Action<string> andThen = default);
        void ShowErrorMessage(string message, MessageItem[] items, Action<MessageItem> andThen = default);
        void ShowErrorMessage(string message, MessageOptions options, MessageItem[] items, Action<MessageItem> andThen = default);
        void ShowInformationMessage(string message, string[] items, Action<string> andThen = default);
        void ShowInformationMessage(string message, MessageOptions options, string[] items, Action<string> andThen = default);
        void ShowInformationMessage(string message, MessageItem[] items, Action<MessageItem> andThen = default);
        void ShowInformationMessage(string message, MessageOptions options, MessageItem[] items, Action<MessageItem> andThen = default);
        void ShowWarningMessage(string message, string[] items, Action<string> andThen = default);
        void ShowWarningMessage(string message, MessageOptions options, string[] items, Action<string> andThen = default);
        void ShowWarningMessage(string message, MessageItem[] items, Action<MessageItem> andThen = default);
        void ShowWarningMessage(string message, MessageOptions options, MessageItem[] items, Action<MessageItem> andThen = default);
        void ShowInputBox(InputBoxOptions options = default, Action<string> andThen = default);
    }

    internal partial class impl : IWindow
    {
        void IWindow.ShowErrorMessage(string message, string[] items, Action<string> andThen)
        {

        }

        void IWindow.ShowErrorMessage(string message, MessageOptions options, string[] items, Action<string> andThen)
        {
        }

        void IWindow.ShowErrorMessage(string message, MessageItem[] items, Action<MessageItem> andThen)
        {
        }

        void IWindow.ShowErrorMessage(string message, MessageOptions options, MessageItem[] items, Action<MessageItem> andThen)
        {
        }

        void IWindow.ShowInformationMessage(string message, string[] items, Action<string> andThen)
        {
        }

        void IWindow.ShowInformationMessage(string message, MessageOptions options, string[] items, Action<string> andThen)
        {
        }

        void IWindow.ShowInformationMessage(string message, MessageItem[] items, Action<MessageItem> andThen)
        {
        }

        void IWindow.ShowInformationMessage(string message, MessageOptions options, MessageItem[] items, Action<MessageItem> andThen)
        {
        }

        void IWindow.ShowWarningMessage(string message, string[] items, Action<string> andThen)
        {
            var msg = new msgToVsc() { ns = "window", name = "showWarningMessage1", payload = new System.Collections.Generic.Dictionary<string, object>(2) };
            msg.payload["message"] = message;
            msg.payload["items"] = items;

            Action<object> on = null;
            if (andThen != null)
                on = (object payload) =>
                {
                    string result;
                    bool ok;
                    ok = payload is string;
                    if (!ok)
                        return;
                    result = (string)payload;
                    andThen(result);
                };

            send(msg, on);
        }

        void IWindow.ShowWarningMessage(string message, MessageOptions options, string[] items, Action<string> andThen)
        {
        }

        void IWindow.ShowWarningMessage(string message, MessageItem[] items, Action<MessageItem> andThen)
        {
        }

        void IWindow.ShowWarningMessage(string message, MessageOptions options, MessageItem[] items, Action<MessageItem> andThen)
        {
        }

        void IWindow.ShowInputBox(InputBoxOptions options, Action<string> andThen)
        {
            var funcids = new System.Collections.Generic.List<string>(1);
            lock (this)
            {
                if (options != null)
                {
                    options.ValidateInput_AppzFuncId = "";
                    var fn = options.ValidateInput;
                    if (fn != null)
                    {
                        options.ValidateInput_AppzFuncId = nextFuncId();
                        cbOther[options.ValidateInput_AppzFuncId] = (object[] args) =>
                        {
                            if (args == null || args.Length != 1)
                                return (null, false);
                            if (!args[0] is string)
                                return (null, false);
                            var a0 = (string)args[0];
                            return (fn(a0), true);
                        };
                    }
                }
            }

            send(null, (object payload) =>
            {
                if (funcids.Count > 0)
                    lock (this)
                        foreach (var fnid in funcids)
                            _ = cbOther.Remove(fnid);

                // if on { on(payload) }
            });
        }
    }

}
