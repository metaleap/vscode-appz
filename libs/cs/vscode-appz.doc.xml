<?xml version="1.0"?>
<doc>
    <assembly>
        <name>vscode-appz</name>
    </assembly>
    <members>
        <member name="T:VscAppz.Vsc">
            <summary>Everything related to the running of your app.</summary>
        </member>
        <member name="F:VscAppz.Vsc.OnErrorDefaultOutputFormat">
            <summary>Used by the default `OnError` handler to print error details to stderr (aka. `Console.Error`).</summary>
        </member>
        <member name="F:VscAppz.Vsc.OnError">
             <summary>
             Reports problems during the ongoing forever-looping stdin/stdout communication
             with the `vscode-appz` VSC extension. Defaults to a stderr println. Must not be `null`.
             Any of its args must be checked for `null`-ness by the `OnError` handler.
            
             `IVscode self`── the caller that encountered the problem being reported.
            
             `object err` ── if an `Exception`, it occurred on the C# side (I/O or JSON), else some JSON-decoded C# value from whatever was transmitted as the problem data (if anything) by VS Code.
            
             `object jsonMsg` ─ if a `string`, the incoming JSON message; if a `Dictionary&lt;string, object&gt;`, the outgoing one.
             </summary>
        </member>
        <member name="M:VscAppz.Vsc.InOut(System.IO.TextReader,System.IO.TextWriter)">
            <summary>Returns an `IVscode` implementation that communicates via the specified input and output streams (with `stdIn` defaulting to `Console.In` and `stdOut` defaulting to `Console.Out`). Communication only begins its forever loop upon the first method invocation (which consequently never `return`s) on any of the `interface`s offered by the returned `IVscode`'s members.</summary>
            <param name="stdIn">If `null`, defaults to `Console.In`.</param>
            <param name="stdOut">If `null`, defaults to `Console.Out`</param>
        </member>
        <member name="T:VscAppz.Cancel">
            <summary>Allows belated cancellation of ongoing / already-initiated interactions.</summary>
        </member>
        <member name="M:VscAppz.Cancel.Now">
            <summary>Cancel.Now signals cancellation to the counterparty.</summary>
        </member>
        <member name="M:VscAppz.Cancel.In(System.TimeSpan)">
            <summary>Cancel.In returns a new `Cancel` with its `Now` already scheduled to be called in `fromNow` duration.</summary>
            <param name="fromNow"></param>
        </member>
        <member name="T:VscAppz.Disposable">
            <summary>Disposable represents an non-transient object identity lifetimed at the counterparty.</summary>
        </member>
        <member name="M:VscAppz.Disposable.Dispose">
            <summary>Dispose signals to the counterparty to destroy the object.</summary>
        </member>
        <member name="T:VscAppz.IVscode">
            <summary>
            Type Definition for Visual Studio Code 1.38 Extension API
            See https://code.visualstudio.com/api for more information
            </summary>
        </member>
        <member name="P:VscAppz.IVscode.Window">
            <summary>
            Namespace for dealing with the current window of the editor. That is visible
            and active editors, as well as, UI elements to show messages, selections, and
            asking for user input.
            </summary>
        </member>
        <member name="P:VscAppz.IVscode.Env">
            <summary>Namespace describing the environment the editor runs in.</summary>
        </member>
        <member name="P:VscAppz.IVscode.Workspace">
            <summary>
            Namespace for dealing with the current workspace. A workspace is the representation
            of the folder that has been opened. There is no workspace when just a file but not a
            folder has been opened.
            
            The workspace offers support for [listening](#workspace.createFileSystemWatcher) to fs
            events and for [finding](#workspace.findFiles) files. Both perform well and run _outside_
            the editor-process so that they should be always used instead of nodejs-equivalents.
            </summary>
        </member>
        <member name="P:VscAppz.IVscode.Languages">
            <summary>
            Namespace for participating in language-specific editor [features](https://code.visualstudio.com/docs/editor/editingevolved),
            like IntelliSense, code actions, diagnostics etc.
            
            Many programming languages exist and there is huge variety in syntaxes, semantics, and paradigms. Despite that, features
            like automatic word-completion, code navigation, or code checking have become popular across different tools for different
            programming languages.
            
            The editor provides an API that makes it simple to provide such common features by having all UI and actions already in place and
            by allowing you to participate by providing data only. For instance, to contribute a hover all you have to do is provide a function
            that can be called with a [TextDocument](#TextDocument) and a [Position](#Position) returning hover info. The rest, like tracking the
            mouse, positioning the hover, keeping the hover stable etc. is taken care of by the editor.
            
            ```javascript
            languages.registerHoverProvider('javascript', {
             	provideHover(document, position, token) {
             		return new Hover('I am a hover!');
             	}
            });
            ```
            
            Registration is done using a [document selector](#DocumentSelector) which is either a language id, like `javascript` or
            a more complex [filter](#DocumentFilter) like `{ language: 'typescript', scheme: 'file' }`. Matching a document against such
            a selector will result in a [score](#languages.match) that is used to determine if and how a provider shall be used. When
            scores are equal the provider that came last wins. For features that allow full arity, like [hover](#languages.registerHoverProvider),
            the score is only checked to be `>0`, for other features, like [IntelliSense](#languages.registerCompletionItemProvider) the
            score is used for determining the order in which providers are asked to participate.
            </summary>
        </member>
        <member name="P:VscAppz.IVscode.Extensions">
            <summary>
            Namespace for dealing with installed extensions. Extensions are represented
            by an [extension](#Extension)-interface which enables reflection on them.
            
            Extension writers can provide APIs to other extensions by returning their API public
            surface from the `activate`-call.
            
            ```javascript
            export function activate(context: vscode.ExtensionContext) {
             	let api = {
             		sum(a, b) {
             			return a + b;
             		},
             		mul(a, b) {
             			return a * b;
             		}
             	};
             	// 'export' public api-surface
             	return api;
            }
            ```
            When depending on the API of another extension add an `extensionDependency`-entry
            to `package.json`, and use the [getExtension](#extensions.getExtension)-function
            and the [exports](#Extension.exports)-property, like below:
            
            ```javascript
            let mathExt = extensions.getExtension('genius.math');
            let importedApi = mathExt.exports;
            
            console.log(importedApi.mul(42, 1));
            ```
            </summary>
        </member>
        <member name="P:VscAppz.IVscode.Commands">
            <summary>
            Namespace for dealing with commands. In short, a command is a function with a
            unique identifier. The function is sometimes also called _command handler_.
            
            Commands can be added to the editor using the [registerCommand](#commands.registerCommand)
            and [registerTextEditorCommand](#commands.registerTextEditorCommand) functions. Commands
            can be executed [manually](#commands.executeCommand) or from a UI gesture. Those are:
            
            * palette - Use the `commands`-section in `package.json` to make a command show in
            the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).
            * keybinding - Use the `keybindings`-section in `package.json` to enable
            [keybindings](https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts)
            for your extension.
            
            Commands from other extensions and from the editor itself are accessible to an extension. However,
            when invoking an editor command not all argument types are supported.
            
            This is a sample that registers a command handler and adds an entry for that command to the palette. First
            register a command handler with the identifier `extension.sayHello`.
            ```javascript
            commands.registerCommand('extension.sayHello', () => {
             	window.showInformationMessage('Hello World!');
            });
            ```
            Second, bind the command identifier to a title under which it will show in the palette (`package.json`).
            ```json
            {
             	"contributes": {
             		"commands": [{
             			"command": "extension.sayHello",
             			"title": "Hello World"
             		}]
             	}
            }
            ```
            </summary>
        </member>
        <member name="T:VscAppz.IWindow">
            <summary>
            Namespace for dealing with the current window of the editor. That is visible
            and active editors, as well as, UI elements to show messages, selections, and
            asking for user input.
            </summary>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,System.String[],System.Action{System.String})">
            <summary>
            Show an information message to users. Optionally provide an array of items which will be presented as
            clickable buttons.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,VscAppz.MessageOptions,System.String[],System.Action{System.String})">
            <summary>
            Show an information message to users. Optionally provide an array of items which will be presented as
            clickable buttons.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an information message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,VscAppz.MessageOptions,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an information message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,System.String[],System.Action{System.String})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,VscAppz.MessageOptions,System.String[],System.Action{System.String})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,VscAppz.MessageOptions,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,System.String[],System.Action{System.String})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,VscAppz.MessageOptions,System.String[],System.Action{System.String})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,VscAppz.MessageOptions,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `then` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="then">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInputBox(VscAppz.InputBoxOptions,VscAppz.Cancel,System.Action{System.String})">
            <summary>
            Opens an input box to ask the user for input.
            
            The returned value will be `undefined` if the input box was canceled (e.g. pressing ESC). Otherwise the
            returned value will be the string typed by the user or an empty string if the user did not type
            anything but dismissed the input box with OK.
            
            `options` ── Configures the behavior of the input box.
            
            `token` ── A token that can be used to signal cancellation.
            
            `then` ── A promise that resolves to a string the user provided or to `undefined` in case of dismissal.
            </summary>
            <param name="options">Configures the behavior of the input box.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="then">A promise that resolves to a string the user provided or to `undefined` in case of dismissal.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(System.String[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{System.String[]})">
            <summary>
            Shows a selection list allowing multiple selections.
            
            `items` ── An array of strings, or a promise that resolves to an array of strings.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `then` ── A promise that resolves to the selected items or `undefined`.
            </summary>
            <param name="items">An array of strings, or a promise that resolves to an array of strings.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="then">A promise that resolves to the selected items or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(System.String[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{System.String})">
            <summary>
            Shows a selection list.
            
            `items` ── An array of strings, or a promise that resolves to an array of strings.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `then` ── A promise that resolves to the selection or `undefined`.
            </summary>
            <param name="items">An array of strings, or a promise that resolves to an array of strings.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="then">A promise that resolves to the selection or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(VscAppz.QuickPickItem[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{VscAppz.QuickPickItem[]})">
            <summary>
            Shows a selection list allowing multiple selections.
            
            `items` ── An array of items, or a promise that resolves to an array of items.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `then` ── A promise that resolves to the selected items or `undefined`.
            </summary>
            <param name="items">An array of items, or a promise that resolves to an array of items.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="then">A promise that resolves to the selected items or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(VscAppz.QuickPickItem[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{VscAppz.QuickPickItem})">
            <summary>
            Shows a selection list.
            
            `items` ── An array of items, or a promise that resolves to an array of items.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `then` ── A promise that resolves to the selected item or `undefined`.
            </summary>
            <param name="items">An array of items, or a promise that resolves to an array of items.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="then">A promise that resolves to the selected item or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.SetStatusBarMessage(System.String,System.Int32,System.Action{VscAppz.Disposable})">
            <summary>
            Set a message to the status bar. This is a short hand for the more powerful
            status bar [items](#window.createStatusBarItem).
            
            `text` ── The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
            
            `hideAfterTimeout` ── Timeout in milliseconds after which the message will be disposed.
            
            `then` ── A disposable which hides the status bar message.
            </summary>
            <param name="text">The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).</param>
            <param name="hideAfterTimeout">Timeout in milliseconds after which the message will be disposed.</param>
            <param name="then">A disposable which hides the status bar message.</param>
        </member>
        <member name="M:VscAppz.IWindow.SetStatusBarMessage(System.String,System.Action{VscAppz.Disposable})">
            <summary>
            Set a message to the status bar. This is a short hand for the more powerful
            status bar [items](#window.createStatusBarItem).
            
            *Note* that status bar messages stack and that they must be disposed when no
            longer used.
            
            `text` ── The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
            
            `then` ── A disposable which hides the status bar message.
            </summary>
            <param name="text">The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).</param>
            <param name="then">A disposable which hides the status bar message.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowSaveDialog(VscAppz.SaveDialogOptions,System.Action{System.String})">
            <summary>
            Shows a file save dialog to the user which allows to select a file
            for saving-purposes.
            
            `options` ── Options that control the dialog.
            
            `then` ── A promise that resolves to the selected resource or `undefined`.
            </summary>
            <param name="options">Options that control the dialog.</param>
            <param name="then">A promise that resolves to the selected resource or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowOpenDialog(VscAppz.OpenDialogOptions,System.Action{System.String[]})">
            <summary>
            Shows a file open dialog to the user which allows to select a file
            for opening-purposes.
            
            `options` ── Options that control the dialog.
            
            `then` ── A promise that resolves to the selected resources or `undefined`.
            </summary>
            <param name="options">Options that control the dialog.</param>
            <param name="then">A promise that resolves to the selected resources or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWorkspaceFolderPick(VscAppz.WorkspaceFolderPickOptions,System.Action{VscAppz.WorkspaceFolder})">
            <summary>
            Shows a selection list of [workspace folders](#workspace.workspaceFolders) to pick from.
            Returns `undefined` if no folder is open.
            
            `options` ── Configures the behavior of the workspace folder list.
            
            `then` ── A promise that resolves to the workspace folder or `undefined`.
            </summary>
            <param name="options">Configures the behavior of the workspace folder list.</param>
            <param name="then">A promise that resolves to the workspace folder or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.State(System.Action{VscAppz.WindowState})">
            <summary>Represents the current window's state.</summary>
        </member>
        <member name="M:VscAppz.IWindow.OnDidChangeWindowState(System.Action{VscAppz.WindowState},System.Action{VscAppz.Disposable})">
            <summary>
            An [event](#Event) which fires when the focus state of the current window
            changes. The value of the event represents whether the window is focused.
            </summary>
        </member>
        <member name="T:VscAppz.IEnv">
            <summary>Namespace describing the environment the editor runs in.</summary>
        </member>
        <member name="M:VscAppz.IEnv.OpenExternal(System.String,System.Action{System.Boolean})">
            <summary>
            Opens an *external* item, e.g. a http(s) or mailto-link, using the
            default application.
            
            *Note* that [`showTextDocument`](#window.showTextDocument) is the right
            way to open a text document inside the editor, not this function.
            
            `target` ── The uri that should be opened.
            
            `then` ── A promise indicating if open was successful.
            </summary>
            <param name="target">The uri that should be opened.</param>
            <param name="then">A promise indicating if open was successful.</param>
        </member>
        <member name="M:VscAppz.IEnv.AppName(System.Action{System.String})">
            <summary>The application name of the editor, like 'VS Code'.</summary>
        </member>
        <member name="M:VscAppz.IEnv.AppRoot(System.Action{System.String})">
            <summary>The application root folder from which the editor is running.</summary>
        </member>
        <member name="M:VscAppz.IEnv.Language(System.Action{System.String})">
            <summary>Represents the preferred user-language, like `de-CH`, `fr`, or `en-US`.</summary>
        </member>
        <member name="M:VscAppz.IEnv.MachineId(System.Action{System.String})">
            <summary>A unique identifier for the computer.</summary>
        </member>
        <member name="M:VscAppz.IEnv.RemoteName(System.Action{System.String})">
            <summary>
            The name of a remote. Defined by extensions, popular samples are `wsl` for the Windows
            Subsystem for Linux or `ssh-remote` for remotes using a secure shell.
            
            *Note* that the value is `undefined` when there is no remote extension host but that the
            value is defined in all extension hosts (local and remote) in case a remote extension host
            exists. Use [`Extension#extensionKind`](#Extension.extensionKind) to know if
            a specific extension runs remote or not.
            </summary>
        </member>
        <member name="M:VscAppz.IEnv.SessionId(System.Action{System.String})">
            <summary>
            A unique identifier for the current session.
            Changes each time the editor is started.
            </summary>
        </member>
        <member name="M:VscAppz.IEnv.Shell(System.Action{System.String})">
            <summary>
            The detected default shell for the extension host, this is overridden by the
            `terminal.integrated.shell` setting for the extension host's platform.
            </summary>
        </member>
        <member name="M:VscAppz.IEnv.UriScheme(System.Action{System.String})">
            <summary>The custom uri scheme the editor registers to in the operating system.</summary>
        </member>
        <member name="M:VscAppz.IEnv.Properties(System.Action{VscAppz.EnvProperties})">
            <summary>Provides single-call access to numerous individual `IEnv` properties at once.</summary>
        </member>
        <member name="T:VscAppz.IWorkspace">
            <summary>
            Namespace for dealing with the current workspace. A workspace is the representation
            of the folder that has been opened. There is no workspace when just a file but not a
            folder has been opened.
            
            The workspace offers support for [listening](#workspace.createFileSystemWatcher) to fs
            events and for [finding](#workspace.findFiles) files. Both perform well and run _outside_
            the editor-process so that they should be always used instead of nodejs-equivalents.
            </summary>
        </member>
        <member name="M:VscAppz.IWorkspace.Name(System.Action{System.String})">
            <summary>
            The name of the workspace. `undefined` when no folder
            has been opened.
            </summary>
        </member>
        <member name="M:VscAppz.IWorkspace.WorkspaceFile(System.Action{System.String})">
            <summary>
            The location of the workspace file, for example:
            
            `file:///Users/name/Development/myProject.code-workspace`
            
            or
            
            `untitled:1555503116870`
            
            for a workspace that is untitled and not yet saved.
            
            Depending on the workspace that is opened, the value will be:
              * `undefined` when no workspace or  a single folder is opened
              * the path of the workspace file as `Uri` otherwise. if the workspace
            is untitled, the returned URI will use the `untitled:` scheme
            
            The location can e.g. be used with the `vscode.openFolder` command to
            open the workspace again after it has been closed.
            
            **Example:**
            ```typescript
            vscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);
            ```
            
            **Note:** it is not advised to use `workspace.workspaceFile` to write
            configuration data into the file. You can use `workspace.getConfiguration().update()`
            for that purpose which will work both when a single folder is opened as
            well as an untitled or saved workspace.
            </summary>
        </member>
        <member name="M:VscAppz.IWorkspace.SaveAll(System.Boolean,System.Action{System.Boolean})">
            <summary>
            Save all dirty files.
            
            `includeUntitled` ── Also save files that have been created during this session.
            
            `then` ── A thenable that resolves when the files have been saved.
            </summary>
            <param name="includeUntitled">Also save files that have been created during this session.</param>
            <param name="then">A thenable that resolves when the files have been saved.</param>
        </member>
        <member name="M:VscAppz.IWorkspace.OnDidChangeWorkspaceFolders(System.Action{VscAppz.WorkspaceFoldersChangeEvent},System.Action{VscAppz.Disposable})">
            <summary>An event that is emitted when a workspace folder is added or removed.</summary>
        </member>
        <member name="M:VscAppz.IWorkspace.GetWorkspaceFolder(System.String,System.Action{VscAppz.WorkspaceFolder})">
            <summary>
            Returns the [workspace folder](#WorkspaceFolder) that contains a given uri.
            * returns `undefined` when the given uri doesn't match any workspace folder
            * returns the *input* when the given uri is a workspace folder itself
            
            `uri` ── An uri.
            
            `then` ── A workspace folder or `undefined`
            </summary>
            <param name="uri">An uri.</param>
            <param name="then">A workspace folder or `undefined`</param>
        </member>
        <member name="M:VscAppz.IWorkspace.WorkspaceFolders(System.Action{VscAppz.WorkspaceFolder[]})">
            <summary>
            List of workspace folders or `undefined` when no folder is open.
            *Note* that the first entry corresponds to the value of `rootPath`.
            </summary>
        </member>
        <member name="M:VscAppz.IWorkspace.FindFiles(System.String,System.String,System.Nullable{System.Int32},VscAppz.Cancel,System.Action{System.String[]})">
            <summary>
            Find files across all [workspace folders](#workspace.workspaceFolders) in the workspace.
            `findFiles('**​/*.js', '**​/node_modules/**', 10)`
            
            `include` ── A [glob pattern](#GlobPattern) that defines the files to search for. The glob pattern
            will be matched against the file paths of resulting matches relative to their workspace. Use a [relative pattern](#RelativePattern)
            to restrict the search results to a [workspace folder](#WorkspaceFolder).
            
            `exclude` ── A [glob pattern](#GlobPattern) that defines files and folders to exclude. The glob pattern
            will be matched against the file paths of resulting matches relative to their workspace. When `undefined` only default excludes will
            apply, when `null` no excludes will apply.
            
            `maxResults` ── An upper-bound for the result.
            
            `token` ── A token that can be used to signal cancellation to the underlying search engine.
            
            `then` ── A thenable that resolves to an array of resource identifiers. Will return no results if no
            [workspace folders](#workspace.workspaceFolders) are opened.
            </summary>
            <param name="include">A [glob pattern](#GlobPattern) that defines the files to search for. The glob pattern will be matched against the file paths of resulting matches relative to their workspace. Use a [relative pattern](#RelativePattern) to restrict the search results to a [workspace folder](#WorkspaceFolder).</param>
            <param name="exclude">A [glob pattern](#GlobPattern) that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace. When `undefined` only default excludes will apply, when `null` no excludes will apply.</param>
            <param name="maxResults">An upper-bound for the result.</param>
            <param name="token">A token that can be used to signal cancellation to the underlying search engine.</param>
            <param name="then">A thenable that resolves to an array of resource identifiers. Will return no results if no [workspace folders](#workspace.workspaceFolders) are opened.</param>
        </member>
        <member name="M:VscAppz.IWorkspace.AsRelativePath(System.String,System.Boolean,System.Action{System.String})">
            <summary>
            Returns a path that is relative to the workspace folder or folders.
            
            When there are no [workspace folders](#workspace.workspaceFolders) or when the path
            is not contained in them, the input is returned.
            
            `pathOrUri` ── A path or uri. When a uri is given its [fsPath](#Uri.fsPath) is used.
            
            `includeWorkspaceFolder` ── When `true` and when the given path is contained inside a
            workspace folder the name of the workspace is prepended. Defaults to `true` when there are
            multiple workspace folders and `false` otherwise.
            
            `then` ── A path relative to the root or the input.
            </summary>
            <param name="pathOrUri">A path or uri. When a uri is given its [fsPath](#Uri.fsPath) is used.</param>
            <param name="includeWorkspaceFolder">When `true` and when the given path is contained inside a workspace folder the name of the workspace is prepended. Defaults to `true` when there are multiple workspace folders and `false` otherwise.</param>
            <param name="then">A path relative to the root or the input.</param>
        </member>
        <member name="M:VscAppz.IWorkspace.Properties(System.Action{VscAppz.WorkspaceProperties})">
            <summary>Provides single-call access to numerous individual `IWorkspace` properties at once.</summary>
        </member>
        <member name="T:VscAppz.ILanguages">
            <summary>
            Namespace for participating in language-specific editor [features](https://code.visualstudio.com/docs/editor/editingevolved),
            like IntelliSense, code actions, diagnostics etc.
            
            Many programming languages exist and there is huge variety in syntaxes, semantics, and paradigms. Despite that, features
            like automatic word-completion, code navigation, or code checking have become popular across different tools for different
            programming languages.
            
            The editor provides an API that makes it simple to provide such common features by having all UI and actions already in place and
            by allowing you to participate by providing data only. For instance, to contribute a hover all you have to do is provide a function
            that can be called with a [TextDocument](#TextDocument) and a [Position](#Position) returning hover info. The rest, like tracking the
            mouse, positioning the hover, keeping the hover stable etc. is taken care of by the editor.
            
            ```javascript
            languages.registerHoverProvider('javascript', {
             	provideHover(document, position, token) {
             		return new Hover('I am a hover!');
             	}
            });
            ```
            
            Registration is done using a [document selector](#DocumentSelector) which is either a language id, like `javascript` or
            a more complex [filter](#DocumentFilter) like `{ language: 'typescript', scheme: 'file' }`. Matching a document against such
            a selector will result in a [score](#languages.match) that is used to determine if and how a provider shall be used. When
            scores are equal the provider that came last wins. For features that allow full arity, like [hover](#languages.registerHoverProvider),
            the score is only checked to be `>0`, for other features, like [IntelliSense](#languages.registerCompletionItemProvider) the
            score is used for determining the order in which providers are asked to participate.
            </summary>
        </member>
        <member name="M:VscAppz.ILanguages.GetLanguages(System.Action{System.String[]})">
            <summary>
            Return the identifiers of all known languages.
            
            `then` ── Promise resolving to an array of identifier strings.
            </summary>
            <param name="then">Promise resolving to an array of identifier strings.</param>
        </member>
        <member name="M:VscAppz.ILanguages.OnDidChangeDiagnostics(System.Action{VscAppz.DiagnosticChangeEvent},System.Action{VscAppz.Disposable})">
            <summary>
            An [event](#Event) which fires when the global set of diagnostics changes. This is
            newly added and removed diagnostics.
            </summary>
        </member>
        <member name="T:VscAppz.IExtensions">
            <summary>
            Namespace for dealing with installed extensions. Extensions are represented
            by an [extension](#Extension)-interface which enables reflection on them.
            
            Extension writers can provide APIs to other extensions by returning their API public
            surface from the `activate`-call.
            
            ```javascript
            export function activate(context: vscode.ExtensionContext) {
             	let api = {
             		sum(a, b) {
             			return a + b;
             		},
             		mul(a, b) {
             			return a * b;
             		}
             	};
             	// 'export' public api-surface
             	return api;
            }
            ```
            When depending on the API of another extension add an `extensionDependency`-entry
            to `package.json`, and use the [getExtension](#extensions.getExtension)-function
            and the [exports](#Extension.exports)-property, like below:
            
            ```javascript
            let mathExt = extensions.getExtension('genius.math');
            let importedApi = mathExt.exports;
            
            console.log(importedApi.mul(42, 1));
            ```
            </summary>
        </member>
        <member name="M:VscAppz.IExtensions.OnDidChange(System.Action,System.Action{VscAppz.Disposable})">
            <summary>
            An event which fires when `extensions.all` changes. This can happen when extensions are
            installed, uninstalled, enabled or disabled.
            </summary>
        </member>
        <member name="T:VscAppz.ICommands">
            <summary>
            Namespace for dealing with commands. In short, a command is a function with a
            unique identifier. The function is sometimes also called _command handler_.
            
            Commands can be added to the editor using the [registerCommand](#commands.registerCommand)
            and [registerTextEditorCommand](#commands.registerTextEditorCommand) functions. Commands
            can be executed [manually](#commands.executeCommand) or from a UI gesture. Those are:
            
            * palette - Use the `commands`-section in `package.json` to make a command show in
            the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).
            * keybinding - Use the `keybindings`-section in `package.json` to enable
            [keybindings](https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts)
            for your extension.
            
            Commands from other extensions and from the editor itself are accessible to an extension. However,
            when invoking an editor command not all argument types are supported.
            
            This is a sample that registers a command handler and adds an entry for that command to the palette. First
            register a command handler with the identifier `extension.sayHello`.
            ```javascript
            commands.registerCommand('extension.sayHello', () => {
             	window.showInformationMessage('Hello World!');
            });
            ```
            Second, bind the command identifier to a title under which it will show in the palette (`package.json`).
            ```json
            {
             	"contributes": {
             		"commands": [{
             			"command": "extension.sayHello",
             			"title": "Hello World"
             		}]
             	}
            }
            ```
            </summary>
        </member>
        <member name="M:VscAppz.ICommands.GetCommands(System.Boolean,System.Action{System.String[]})">
            <summary>
            Retrieve the list of all available commands. Commands starting an underscore are
            treated as internal commands.
            
            `filterInternal` ── Set `true` to not see internal commands (starting with an underscore)
            
            `then` ── Thenable that resolves to a list of command ids.
            </summary>
            <param name="filterInternal">Set `true` to not see internal commands (starting with an underscore)</param>
            <param name="then">Thenable that resolves to a list of command ids.</param>
        </member>
        <member name="T:VscAppz.MessageOptions">
            <summary>Options to configure the behavior of the message.</summary>
        </member>
        <member name="F:VscAppz.MessageOptions.Modal">
            <summary>Indicates that this message should be modal.</summary>
        </member>
        <member name="T:VscAppz.MessageItem">
            <summary>
            Represents an action that is shown with an information, warning, or
            error message.
            </summary>
        </member>
        <member name="F:VscAppz.MessageItem.Title">
            <summary>A short title like 'Retry', 'Open Log' etc.</summary>
        </member>
        <member name="F:VscAppz.MessageItem.IsCloseAffordance">
            <summary>
            A hint for modal dialogs that the item should be triggered
            when the user cancels the dialog (e.g. by pressing the ESC
            key).
            
            Note: this option is ignored for non-modal messages.
            </summary>
        </member>
        <member name="F:VscAppz.MessageItem.My">
            <summary>Free-form custom data, preserved across a roundtrip.</summary>
        </member>
        <member name="T:VscAppz.InputBoxOptions">
            <summary>Options to configure the behavior of the input box UI.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.Value">
            <summary>The value to prefill in the input box.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.ValueSelection">
            <summary>
            Selection of the prefilled [`value`](#InputBoxOptions.value). Defined as tuple of two number where the
            first is the inclusive start index and the second the exclusive end index. When `undefined` the whole
            word will be selected, when empty (start equals end) only the cursor will be set,
            otherwise the defined range will be selected.
            </summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.Prompt">
            <summary>The text to display underneath the input box.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.PlaceHolder">
            <summary>An optional string to show as place holder in the input box to guide the user what to type.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.Password">
            <summary>Set to `true` to show a password prompt that will not show the typed value.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.IgnoreFocusOut">
            <summary>Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.ValidateInput">
            <summary>
            An optional function that will be called to validate input and to give a hint
            to the user.
            
            `value` ── The current value of the input box.
            
            `return` ── A human readable string which is presented as diagnostic message.
            Return `undefined`, `null`, or the empty string when 'value' is valid.
            </summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.ValidateInput_AppzFuncId">
            <summary>For internal runtime use only.</summary>
        </member>
        <member name="T:VscAppz.QuickPickOptions">
            <summary>Options to configure the behavior of the quick pick UI.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.MatchOnDescription">
            <summary>An optional flag to include the description when filtering the picks.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.MatchOnDetail">
            <summary>An optional flag to include the detail when filtering the picks.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.PlaceHolder">
            <summary>An optional string to show as place holder in the input box to guide the user what to pick on.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.IgnoreFocusOut">
            <summary>Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.CanPickMany">
            <summary>An optional flag to make the picker accept multiple selections, if true the result is an array of picks.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.OnDidSelectItem">
            <summary>An optional function that is invoked whenever an item is selected.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.OnDidSelectItem_AppzFuncId">
            <summary>For internal runtime use only.</summary>
        </member>
        <member name="T:VscAppz.QuickPickItem">
            <summary>
            Represents an item that can be selected from
            a list of items.
            </summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Label">
            <summary>A human readable string which is rendered prominent.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Description">
            <summary>A human readable string which is rendered less prominent.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Detail">
            <summary>A human readable string which is rendered less prominent.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Picked">
            <summary>
            Optional flag indicating if this item is picked initially.
            (Only honored when the picker allows multiple selections.)
            </summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.AlwaysShow">
            <summary>Always show this item.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.My">
            <summary>Free-form custom data, preserved across a roundtrip.</summary>
        </member>
        <member name="T:VscAppz.SaveDialogOptions">
            <summary>Options to configure the behaviour of a file save dialog.</summary>
        </member>
        <member name="F:VscAppz.SaveDialogOptions.DefaultUri">
            <summary>The resource the dialog shows when opened.</summary>
        </member>
        <member name="F:VscAppz.SaveDialogOptions.SaveLabel">
            <summary>A human-readable string for the save button.</summary>
        </member>
        <member name="F:VscAppz.SaveDialogOptions.Filters">
            <summary>
            A set of file filters that are used by the dialog. Each entry is a human readable label,
            like "TypeScript", and an array of extensions, e.g.
            ```ts
            {
             	'Images': ['png', 'jpg']
             	'TypeScript': ['ts', 'tsx']
            }
            ```
            </summary>
        </member>
        <member name="T:VscAppz.OpenDialogOptions">
            <summary>
            Options to configure the behaviour of a file open dialog.
            
            * Note 1: A dialog can select files, folders, or both. This is not true for Windows
            which enforces to open either files or folder, but *not both*.
            * Note 2: Explicitly setting `canSelectFiles` and `canSelectFolders` to `false` is futile
            and the editor then silently adjusts the options to select files.
            </summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.DefaultUri">
            <summary>The resource the dialog shows when opened.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.OpenLabel">
            <summary>A human-readable string for the open button.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.CanSelectFiles">
            <summary>Allow to select files, defaults to `true`.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.CanSelectFolders">
            <summary>Allow to select folders, defaults to `false`.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.CanSelectMany">
            <summary>Allow to select many files or folders.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.Filters">
            <summary>
            A set of file filters that are used by the dialog. Each entry is a human readable label,
            like "TypeScript", and an array of extensions, e.g.
            ```ts
            {
             	'Images': ['png', 'jpg']
             	'TypeScript': ['ts', 'tsx']
            }
            ```
            </summary>
        </member>
        <member name="T:VscAppz.WorkspaceFolderPickOptions">
            <summary>Options to configure the behaviour of the [workspace folder](#WorkspaceFolder) pick UI.</summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolderPickOptions.PlaceHolder">
            <summary>An optional string to show as place holder in the input box to guide the user what to pick on.</summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolderPickOptions.IgnoreFocusOut">
            <summary>Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.</summary>
        </member>
        <member name="T:VscAppz.WorkspaceFolder">
            <summary>
            A workspace folder is one of potentially many roots opened by the editor. All workspace folders
            are equal which means there is no notion of an active or master workspace folder.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolder.Uri">
            <summary>
            The associated uri for this workspace folder.
            
            *Note:* The [Uri](#Uri)-type was intentionally chosen such that future releases of the editor can support
            workspace folders that are not stored on the local disk, e.g. `ftp://server/workspaces/foo`.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolder.Name">
            <summary>
            The name of this workspace folder. Defaults to
            the basename of its [uri-path](#Uri.path)
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolder.Index">
            <summary>The ordinal number of this workspace folder.</summary>
        </member>
        <member name="T:VscAppz.WindowState">
            <summary>Represents the state of a window.</summary>
        </member>
        <member name="F:VscAppz.WindowState.Focused">
            <summary>Whether the current window is focused.</summary>
        </member>
        <member name="T:VscAppz.WorkspaceFoldersChangeEvent">
            <summary>An event describing a change to the set of [workspace folders](#workspace.workspaceFolders).</summary>
        </member>
        <member name="F:VscAppz.WorkspaceFoldersChangeEvent.Added">
            <summary>Added workspace folders.</summary>
        </member>
        <member name="F:VscAppz.WorkspaceFoldersChangeEvent.Removed">
            <summary>Removed workspace folders.</summary>
        </member>
        <member name="T:VscAppz.DiagnosticChangeEvent">
            <summary>The event that is fired when diagnostics change.</summary>
        </member>
        <member name="F:VscAppz.DiagnosticChangeEvent.Uris">
            <summary>An array of resources for which diagnostics have changed.</summary>
        </member>
        <member name="T:VscAppz.EnvProperties">
            <summary>Namespace describing the environment the editor runs in.</summary>
        </member>
        <member name="F:VscAppz.EnvProperties.AppName">
            <summary>The application name of the editor, like 'VS Code'.</summary>
        </member>
        <member name="F:VscAppz.EnvProperties.AppRoot">
            <summary>The application root folder from which the editor is running.</summary>
        </member>
        <member name="F:VscAppz.EnvProperties.Language">
            <summary>Represents the preferred user-language, like `de-CH`, `fr`, or `en-US`.</summary>
        </member>
        <member name="F:VscAppz.EnvProperties.MachineId">
            <summary>A unique identifier for the computer.</summary>
        </member>
        <member name="F:VscAppz.EnvProperties.RemoteName">
            <summary>
            The name of a remote. Defined by extensions, popular samples are `wsl` for the Windows
            Subsystem for Linux or `ssh-remote` for remotes using a secure shell.
            
            *Note* that the value is `undefined` when there is no remote extension host but that the
            value is defined in all extension hosts (local and remote) in case a remote extension host
            exists. Use [`Extension#extensionKind`](#Extension.extensionKind) to know if
            a specific extension runs remote or not.
            </summary>
        </member>
        <member name="F:VscAppz.EnvProperties.SessionId">
            <summary>
            A unique identifier for the current session.
            Changes each time the editor is started.
            </summary>
        </member>
        <member name="F:VscAppz.EnvProperties.Shell">
            <summary>
            The detected default shell for the extension host, this is overridden by the
            `terminal.integrated.shell` setting for the extension host's platform.
            </summary>
        </member>
        <member name="F:VscAppz.EnvProperties.UriScheme">
            <summary>The custom uri scheme the editor registers to in the operating system.</summary>
        </member>
        <member name="T:VscAppz.WorkspaceProperties">
            <summary>
            Namespace for dealing with the current workspace. A workspace is the representation
            of the folder that has been opened. There is no workspace when just a file but not a
            folder has been opened.
            
            The workspace offers support for [listening](#workspace.createFileSystemWatcher) to fs
            events and for [finding](#workspace.findFiles) files. Both perform well and run _outside_
            the editor-process so that they should be always used instead of nodejs-equivalents.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceProperties.Name">
            <summary>
            The name of the workspace. `undefined` when no folder
            has been opened.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceProperties.WorkspaceFile">
            <summary>
            The location of the workspace file, for example:
            
            `file:///Users/name/Development/myProject.code-workspace`
            
            or
            
            `untitled:1555503116870`
            
            for a workspace that is untitled and not yet saved.
            
            Depending on the workspace that is opened, the value will be:
              * `undefined` when no workspace or  a single folder is opened
              * the path of the workspace file as `Uri` otherwise. if the workspace
            is untitled, the returned URI will use the `untitled:` scheme
            
            The location can e.g. be used with the `vscode.openFolder` command to
            open the workspace again after it has been closed.
            
            **Example:**
            ```typescript
            vscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);
            ```
            
            **Note:** it is not advised to use `workspace.workspaceFile` to write
            configuration data into the file. You can use `workspace.getConfiguration().update()`
            for that purpose which will work both when a single folder is opened as
            well as an untitled or saved workspace.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceProperties.WorkspaceFolders">
            <summary>
            List of workspace folders or `undefined` when no folder is open.
            *Note* that the first entry corresponds to the value of `rootPath`.
            </summary>
        </member>
    </members>
</doc>
