<?xml version="1.0"?>
<doc>
    <assembly>
        <name>vscode-appz</name>
    </assembly>
    <members>
        <member name="T:VscAppz.Vsc">
            <summary>Everything related to the running of your app.</summary>
        </member>
        <member name="F:VscAppz.Vsc.OnErrorDefaultOutputFormat">
            <summary>Used by the default `OnError` handler to print error details to stderr (aka. `Console.Error`).</summary>
        </member>
        <member name="F:VscAppz.Vsc.OnError">
             <summary>
             Reports problems during the ongoing forever-looping stdin/stdout communication
             with the `vscode-appz` VSC extension. Defaults to a stderr println. Must not be `null`.
             Any of its args must be checked for `null`-ness by the `OnError` handler.
            
             `IVscode self`── the caller that encountered the problem being reported.
            
             `object err` ── if an `Exception`, it occurred on the C# side (I/O or JSON), else some JSON-decoded C# value from whatever was transmitted as the problem data (if anything) by VS Code.
            
             `object jsonMsg` ─ if a `string`, the incoming JSON message; if a `Dictionary&lt;string, object&gt;`, the outgoing one.
             </summary>
        </member>
        <member name="M:VscAppz.Vsc.InOut(System.IO.TextReader,System.IO.TextWriter)">
            <summary>Returns an `IVscode` implementation that communicates via the specified input and output streams (with `stdIn` defaulting to `Console.In` and `stdOut` defaulting to `Console.Out`). Communication only begins its forever loop upon the first method invocation (which consequently never `return`s) on any of the `interface`s offered by the returned `IVscode`'s members.</summary>
            <param name="stdIn">If `null`, defaults to `Console.In`.</param>
            <param name="stdOut">If `null`, defaults to `Console.Out`</param>
        </member>
        <member name="T:VscAppz.Cancel">
            <summary>Allows belated cancellation of ongoing / already-initiated interactions.</summary>
        </member>
        <member name="M:VscAppz.Cancel.Now">
            <summary>Cancel.Now signals cancellation to the counterparty.</summary>
        </member>
        <member name="M:VscAppz.Cancel.In(System.TimeSpan)">
            <summary>Cancel.In returns a new `Cancel` with its `Now` already scheduled to be called in `fromNow` duration.</summary>
            <param name="fromNow"></param>
        </member>
        <member name="T:VscAppz.Disposable">
            <summary>Disposable represents an non-transient object identity lifetimed at the counterparty.</summary>
        </member>
        <member name="M:VscAppz.Disposable.Dispose">
            <summary>Dispose signals to the counterparty to destroy the object.</summary>
        </member>
        <member name="T:VscAppz.IVscode">
            <summary>
            Type Definition for Visual Studio Code 1.38 Extension API
            See https://code.visualstudio.com/api for more information
            </summary>
        </member>
        <member name="P:VscAppz.IVscode.Window">
            <summary>
            Namespace for dealing with the current window of the editor. That is visible
            and active editors, as well as, UI elements to show messages, selections, and
            asking for user input.
            </summary>
        </member>
        <member name="T:VscAppz.IWindow">
            <summary>
            Namespace for dealing with the current window of the editor. That is visible
            and active editors, as well as, UI elements to show messages, selections, and
            asking for user input.
            </summary>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,System.String[],System.Action{System.String})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,VscAppz.MessageOptions,System.String[],System.Action{System.String})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowErrorMessage(System.String,VscAppz.MessageOptions,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an error message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,System.String[],System.Action{System.String})">
            <summary>
            Show an information message to users. Optionally provide an array of items which will be presented as
            clickable buttons.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,VscAppz.MessageOptions,System.String[],System.Action{System.String})">
            <summary>
            Show an information message to users. Optionally provide an array of items which will be presented as
            clickable buttons.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an information message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInformationMessage(System.String,VscAppz.MessageOptions,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show an information message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,System.String[],System.Action{System.String})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,VscAppz.MessageOptions,System.String[],System.Action{System.String})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWarningMessage(System.String,VscAppz.MessageOptions,VscAppz.MessageItem[],System.Action{VscAppz.MessageItem})">
            <summary>
            Show a warning message.
            
            `message` ── The message to show.
            
            `options` ── Configures the behaviour of the message.
            
            `items` ── A set of items that will be rendered as actions in the message.
            
            `andThen` ── A thenable that resolves to the selected item or `undefined` when being dismissed.
            </summary>
            <param name="message">The message to show.</param>
            <param name="options">Configures the behaviour of the message.</param>
            <param name="items">A set of items that will be rendered as actions in the message.</param>
            <param name="andThen">A thenable that resolves to the selected item or `undefined` when being dismissed.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowInputBox(VscAppz.InputBoxOptions,VscAppz.Cancel,System.Action{System.String})">
            <summary>
            Opens an input box to ask the user for input.
            
            The returned value will be `undefined` if the input box was canceled (e.g. pressing ESC). Otherwise the
            returned value will be the string typed by the user or an empty string if the user did not type
            anything but dismissed the input box with OK.
            
            `options` ── Configures the behavior of the input box.
            
            `token` ── A token that can be used to signal cancellation.
            
            `andThen` ── A promise that resolves to a string the user provided or to `undefined` in case of dismissal.
            </summary>
            <param name="options">Configures the behavior of the input box.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="andThen">A promise that resolves to a string the user provided or to `undefined` in case of dismissal.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(System.String[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{System.String[]})">
            <summary>
            Shows a selection list allowing multiple selections.
            
            `items` ── An array of strings, or a promise that resolves to an array of strings.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `andThen` ── A promise that resolves to the selected items or `undefined`.
            </summary>
            <param name="items">An array of strings, or a promise that resolves to an array of strings.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="andThen">A promise that resolves to the selected items or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(System.String[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{System.String})">
            <summary>
            Shows a selection list.
            
            `items` ── An array of strings, or a promise that resolves to an array of strings.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `andThen` ── A promise that resolves to the selection or `undefined`.
            </summary>
            <param name="items">An array of strings, or a promise that resolves to an array of strings.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="andThen">A promise that resolves to the selection or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(VscAppz.QuickPickItem[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{VscAppz.QuickPickItem[]})">
            <summary>
            Shows a selection list allowing multiple selections.
            
            `items` ── An array of items, or a promise that resolves to an array of items.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `andThen` ── A promise that resolves to the selected items or `undefined`.
            </summary>
            <param name="items">An array of items, or a promise that resolves to an array of items.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="andThen">A promise that resolves to the selected items or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowQuickPick(VscAppz.QuickPickItem[],VscAppz.QuickPickOptions,VscAppz.Cancel,System.Action{VscAppz.QuickPickItem})">
            <summary>
            Shows a selection list.
            
            `items` ── An array of items, or a promise that resolves to an array of items.
            
            `options` ── Configures the behavior of the selection list.
            
            `token` ── A token that can be used to signal cancellation.
            
            `andThen` ── A promise that resolves to the selected item or `undefined`.
            </summary>
            <param name="items">An array of items, or a promise that resolves to an array of items.</param>
            <param name="options">Configures the behavior of the selection list.</param>
            <param name="token">A token that can be used to signal cancellation.</param>
            <param name="andThen">A promise that resolves to the selected item or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.SetStatusBarMessage(System.String,System.Int32,System.Action{VscAppz.Disposable})">
            <summary>
            Set a message to the status bar. This is a short hand for the more powerful
            status bar [items](#window.createStatusBarItem).
            
            `text` ── The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
            
            `hideAfterTimeout` ── Timeout in milliseconds after which the message will be disposed.
            
            `andThen` ── A disposable which hides the status bar message.
            </summary>
            <param name="text">The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).</param>
            <param name="hideAfterTimeout">Timeout in milliseconds after which the message will be disposed.</param>
            <param name="andThen">A disposable which hides the status bar message.</param>
        </member>
        <member name="M:VscAppz.IWindow.SetStatusBarMessage(System.String,System.Action{VscAppz.Disposable})">
            <summary>
            Set a message to the status bar. This is a short hand for the more powerful
            status bar [items](#window.createStatusBarItem).
            
            *Note* that status bar messages stack and that they must be disposed when no
            longer used.
            
            `text` ── The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
            
            `andThen` ── A disposable which hides the status bar message.
            </summary>
            <param name="text">The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).</param>
            <param name="andThen">A disposable which hides the status bar message.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowSaveDialog(VscAppz.SaveDialogOptions,System.Action{System.String})">
            <summary>
            Shows a file save dialog to the user which allows to select a file
            for saving-purposes.
            
            `options` ── Options that control the dialog.
            
            `andThen` ── A promise that resolves to the selected resource or `undefined`.
            </summary>
            <param name="options">Options that control the dialog.</param>
            <param name="andThen">A promise that resolves to the selected resource or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowOpenDialog(VscAppz.OpenDialogOptions,System.Action{System.String[]})">
            <summary>
            Shows a file open dialog to the user which allows to select a file
            for opening-purposes.
            
            `options` ── Options that control the dialog.
            
            `andThen` ── A promise that resolves to the selected resources or `undefined`.
            </summary>
            <param name="options">Options that control the dialog.</param>
            <param name="andThen">A promise that resolves to the selected resources or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.ShowWorkspaceFolderPick(VscAppz.WorkspaceFolderPickOptions,System.Action{VscAppz.WorkspaceFolder})">
            <summary>
            Shows a selection list of [workspace folders](#workspace.workspaceFolders) to pick from.
            Returns `undefined` if no folder is open.
            
            `options` ── Configures the behavior of the workspace folder list.
            
            `andThen` ── A promise that resolves to the workspace folder or `undefined`.
            </summary>
            <param name="options">Configures the behavior of the workspace folder list.</param>
            <param name="andThen">A promise that resolves to the workspace folder or `undefined`.</param>
        </member>
        <member name="M:VscAppz.IWindow.State(System.Action{VscAppz.WindowState})">
            <summary>Represents the current window's state.</summary>
        </member>
        <member name="T:VscAppz.MessageOptions">
            <summary>Options to configure the behavior of the message.</summary>
        </member>
        <member name="F:VscAppz.MessageOptions.Modal">
            <summary>Indicates that this message should be modal.</summary>
        </member>
        <member name="T:VscAppz.MessageItem">
            <summary>
            Represents an action that is shown with an information, warning, or
            error message.
            </summary>
        </member>
        <member name="F:VscAppz.MessageItem.Title">
            <summary>A short title like 'Retry', 'Open Log' etc.</summary>
        </member>
        <member name="F:VscAppz.MessageItem.IsCloseAffordance">
            <summary>
            A hint for modal dialogs that the item should be triggered
            when the user cancels the dialog (e.g. by pressing the ESC
            key).
            
            Note: this option is ignored for non-modal messages.
            </summary>
        </member>
        <member name="F:VscAppz.MessageItem.My">
            <summary>Free-form custom data, preserved across a roundtrip.</summary>
        </member>
        <member name="T:VscAppz.InputBoxOptions">
            <summary>Options to configure the behavior of the input box UI.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.Value">
            <summary>The value to prefill in the input box.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.ValueSelection">
            <summary>
            Selection of the prefilled [`value`](#InputBoxOptions.value). Defined as tuple of two number where the
            first is the inclusive start index and the second the exclusive end index. When `undefined` the whole
            word will be selected, when empty (start equals end) only the cursor will be set,
            otherwise the defined range will be selected.
            </summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.Prompt">
            <summary>The text to display underneath the input box.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.PlaceHolder">
            <summary>An optional string to show as place holder in the input box to guide the user what to type.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.Password">
            <summary>Set to `true` to show a password prompt that will not show the typed value.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.IgnoreFocusOut">
            <summary>Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.</summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.ValidateInput">
            <summary>
            An optional function that will be called to validate input and to give a hint
            to the user.
            
            `value` ── The current value of the input box.
            
            `return` ── A human readable string which is presented as diagnostic message.
            Return `undefined`, `null`, or the empty string when 'value' is valid.
            </summary>
        </member>
        <member name="F:VscAppz.InputBoxOptions.ValidateInput_AppzFuncId">
            <summary>For internal runtime use only.</summary>
        </member>
        <member name="T:VscAppz.QuickPickOptions">
            <summary>Options to configure the behavior of the quick pick UI.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.MatchOnDescription">
            <summary>An optional flag to include the description when filtering the picks.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.MatchOnDetail">
            <summary>An optional flag to include the detail when filtering the picks.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.PlaceHolder">
            <summary>An optional string to show as place holder in the input box to guide the user what to pick on.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.IgnoreFocusOut">
            <summary>Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.CanPickMany">
            <summary>An optional flag to make the picker accept multiple selections, if true the result is an array of picks.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.OnDidSelectItem">
            <summary>An optional function that is invoked whenever an item is selected.</summary>
        </member>
        <member name="F:VscAppz.QuickPickOptions.OnDidSelectItem_AppzFuncId">
            <summary>For internal runtime use only.</summary>
        </member>
        <member name="T:VscAppz.QuickPickItem">
            <summary>
            Represents an item that can be selected from
            a list of items.
            </summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Label">
            <summary>A human readable string which is rendered prominent.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Description">
            <summary>A human readable string which is rendered less prominent.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Detail">
            <summary>A human readable string which is rendered less prominent.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.Picked">
            <summary>
            Optional flag indicating if this item is picked initially.
            (Only honored when the picker allows multiple selections.)
            </summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.AlwaysShow">
            <summary>Always show this item.</summary>
        </member>
        <member name="F:VscAppz.QuickPickItem.My">
            <summary>Free-form custom data, preserved across a roundtrip.</summary>
        </member>
        <member name="T:VscAppz.SaveDialogOptions">
            <summary>Options to configure the behaviour of a file save dialog.</summary>
        </member>
        <member name="F:VscAppz.SaveDialogOptions.SaveLabel">
            <summary>A human-readable string for the save button.</summary>
        </member>
        <member name="F:VscAppz.SaveDialogOptions.Filters">
            <summary>
            A set of file filters that are used by the dialog. Each entry is a human readable label,
            like "TypeScript", and an array of extensions, e.g.
            ```ts
            {
             	'Images': ['png', 'jpg']
             	'TypeScript': ['ts', 'tsx']
            }
            ```
            </summary>
        </member>
        <member name="T:VscAppz.OpenDialogOptions">
            <summary>
            Options to configure the behaviour of a file open dialog.
            
            * Note 1: A dialog can select files, folders, or both. This is not true for Windows
            which enforces to open either files or folder, but *not both*.
            * Note 2: Explicitly setting `canSelectFiles` and `canSelectFolders` to `false` is futile
            and the editor then silently adjusts the options to select files.
            </summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.OpenLabel">
            <summary>A human-readable string for the open button.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.CanSelectFiles">
            <summary>Allow to select files, defaults to `true`.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.CanSelectFolders">
            <summary>Allow to select folders, defaults to `false`.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.CanSelectMany">
            <summary>Allow to select many files or folders.</summary>
        </member>
        <member name="F:VscAppz.OpenDialogOptions.Filters">
            <summary>
            A set of file filters that are used by the dialog. Each entry is a human readable label,
            like "TypeScript", and an array of extensions, e.g.
            ```ts
            {
             	'Images': ['png', 'jpg']
             	'TypeScript': ['ts', 'tsx']
            }
            ```
            </summary>
        </member>
        <member name="T:VscAppz.WorkspaceFolderPickOptions">
            <summary>Options to configure the behaviour of the [workspace folder](#WorkspaceFolder) pick UI.</summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolderPickOptions.PlaceHolder">
            <summary>An optional string to show as place holder in the input box to guide the user what to pick on.</summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolderPickOptions.IgnoreFocusOut">
            <summary>Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.</summary>
        </member>
        <member name="T:VscAppz.WorkspaceFolder">
            <summary>
            A workspace folder is one of potentially many roots opened by the editor. All workspace folders
            are equal which means there is no notion of an active or master workspace folder.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolder.Uri">
            <summary>
            The associated uri for this workspace folder.
            
            *Note:* The [Uri](#Uri)-type was intentionally chosen such that future releases of the editor can support
            workspace folders that are not stored on the local disk, e.g. `ftp://server/workspaces/foo`.
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolder.Name">
            <summary>
            The name of this workspace folder. Defaults to
            the basename of its [uri-path](#Uri.path)
            </summary>
        </member>
        <member name="F:VscAppz.WorkspaceFolder.Index">
            <summary>The ordinal number of this workspace folder.</summary>
        </member>
        <member name="T:VscAppz.WindowState">
            <summary>Represents the state of a window.</summary>
        </member>
        <member name="F:VscAppz.WindowState.Focused">
            <summary>Whether the current window is focused.</summary>
        </member>
    </members>
</doc>
