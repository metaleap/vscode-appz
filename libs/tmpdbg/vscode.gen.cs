//DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-csharp.ts via github.com/metaleap/vscode-appz/src/gen/main.ts
namespace VscAppz {
	using System;
	using System.Collections.Generic;
	using Newtonsoft.Json;

	using Any = System.Object;
	using Dict = Dictionary<string, Any>;

	public interface IVscode {
		IWindow Window;
	}
	public enum DiagnosticTag{
		Unnecessary = 1,
		Deprecated = 2,
	}
	public enum DiagnosticSeverity{
		Error = 0,
		Warning = 1,
		Information = 2,
		Hint = 3,
	}
	public partial class MessageOptions {
		[JsonProperty("modal")]
		public bool Modal;
	}
	public partial class MessageItem {
		[JsonProperty("title"), JsonRequired]
		public string Title;
		[JsonProperty("isCloseAffordance")]
		public bool IsCloseAffordance;
		[JsonProperty("my")]
		public Dict My;
	}
	public partial class InputBoxOptions {
		[JsonProperty("value")]
		public string Value;
		[JsonProperty("valueSelection")]
		public Nullable<(int, int)> ValueSelection;
		[JsonProperty("prompt")]
		public string Prompt;
		[JsonProperty("placeHolder")]
		public string PlaceHolder;
		[JsonProperty("password")]
		public bool Password;
		[JsonProperty("ignoreFocusOut")]
		public bool IgnoreFocusOut;
		[JsonIgnore]
		public Func<string, string> ValidateInput;
		[JsonProperty("validateInput_AppzFuncId")]
		public string ValidateInput_AppzFuncId;
	}
	public interface IWindow {
		void ShowErrorMessage(string message = default, string[] items = default, Action<string> andThen = default);
		void ShowErrorMessage(string message = default, MessageOptions options = default, string[] items = default, Action<string> andThen = default);
		void ShowErrorMessage(string message = default, MessageItem[] items = default, Action<MessageItem> andThen = default);
		void ShowErrorMessage(string message = default, MessageOptions options = default, MessageItem[] items = default, Action<MessageItem> andThen = default);
		void ShowInformationMessage(string message = default, string[] items = default, Action<string> andThen = default);
		void ShowInformationMessage(string message = default, MessageOptions options = default, string[] items = default, Action<string> andThen = default);
		void ShowInformationMessage(string message = default, MessageItem[] items = default, Action<MessageItem> andThen = default);
		void ShowInformationMessage(string message = default, MessageOptions options = default, MessageItem[] items = default, Action<MessageItem> andThen = default);
		void ShowWarningMessage(string message = default, string[] items = default, Action<string> andThen = default);
		void ShowWarningMessage(string message = default, MessageOptions options = default, string[] items = default, Action<string> andThen = default);
		void ShowWarningMessage(string message = default, MessageItem[] items = default, Action<MessageItem> andThen = default);
		void ShowWarningMessage(string message = default, MessageOptions options = default, MessageItem[] items = default, Action<MessageItem> andThen = default);
		void ShowInputBox(InputBoxOptions options = default, Action<string> andThen = default);
	}
	internal partial class impl : IVscode, IWindow {


		IVscode·Window: ( -> IWindow)
			return this




		IWindow·ShowErrorMessage: (message:string -> items:string[] -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showErrorMessage1"
			msg.Data = dict·new(2)
			msg.Data@"message" = message
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowErrorMessage: (message:string -> options:MessageOptions -> items:string[] -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showErrorMessage2"
			msg.Data = dict·new(3)
			msg.Data@"message" = message
			msg.Data@"options" = options
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowErrorMessage: (message:string -> items:MessageItem[] -> andThen:Action<MessageItem> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showErrorMessage3"
			msg.Data = dict·new(2)
			msg.Data@"message" = message
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of MessageItem
					if (=?payload)
						result = MessageItem·new
						ok = result.populateFrom(payload)
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowErrorMessage: (message:string -> options:MessageOptions -> items:MessageItem[] -> andThen:Action<MessageItem> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showErrorMessage4"
			msg.Data = dict·new(3)
			msg.Data@"message" = message
			msg.Data@"options" = options
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of MessageItem
					if (=?payload)
						result = MessageItem·new
						ok = result.populateFrom(payload)
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowInformationMessage: (message:string -> items:string[] -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showInformationMessage1"
			msg.Data = dict·new(2)
			msg.Data@"message" = message
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowInformationMessage: (message:string -> options:MessageOptions -> items:string[] -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showInformationMessage2"
			msg.Data = dict·new(3)
			msg.Data@"message" = message
			msg.Data@"options" = options
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowInformationMessage: (message:string -> items:MessageItem[] -> andThen:Action<MessageItem> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showInformationMessage3"
			msg.Data = dict·new(2)
			msg.Data@"message" = message
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of MessageItem
					if (=?payload)
						result = MessageItem·new
						ok = result.populateFrom(payload)
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowInformationMessage: (message:string -> options:MessageOptions -> items:MessageItem[] -> andThen:Action<MessageItem> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showInformationMessage4"
			msg.Data = dict·new(3)
			msg.Data@"message" = message
			msg.Data@"options" = options
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of MessageItem
					if (=?payload)
						result = MessageItem·new
						ok = result.populateFrom(payload)
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowWarningMessage: (message:string -> items:string[] -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showWarningMessage1"
			msg.Data = dict·new(2)
			msg.Data@"message" = message
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowWarningMessage: (message:string -> options:MessageOptions -> items:string[] -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showWarningMessage2"
			msg.Data = dict·new(3)
			msg.Data@"message" = message
			msg.Data@"options" = options
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowWarningMessage: (message:string -> items:MessageItem[] -> andThen:Action<MessageItem> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showWarningMessage3"
			msg.Data = dict·new(2)
			msg.Data@"message" = message
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of MessageItem
					if (=?payload)
						result = MessageItem·new
						ok = result.populateFrom(payload)
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowWarningMessage: (message:string -> options:MessageOptions -> items:MessageItem[] -> andThen:Action<MessageItem> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showWarningMessage4"
			msg.Data = dict·new(3)
			msg.Data@"message" = message
			msg.Data@"options" = options
			msg.Data@"items" = items
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of MessageItem
					if (=?payload)
						result = MessageItem·new
						ok = result.populateFrom(payload)
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, on)




		IWindow·ShowInputBox: (options:InputBoxOptions -> andThen:Action<string> -> void)
			var msg of ipcMsg
			msg = ipcMsg·new
			msg.QName = "window.showInputBox"
			msg.Data = dict·new(1)
			var fnids of List<string>
			fnids = [string]·new(1)
			lock this
				if (=?options)
					options.ValidateInput_AppzFuncId = ""
					var fn of Func<string, string>
					fn = options.ValidateInput
					if (=?fn)
						options.ValidateInput_AppzFuncId = this.nextFuncId()
						fnids·add(options.ValidateInput_AppzFuncId)
						this.cbOther@options.ValidateInput_AppzFuncId = (args:Any[] -> (Any, bool))
							if (1 != args·len)
								return [null,false]
							else
								var ok of bool
								var __0 of string
								if (=?args@0)
									[__0,ok] = ((args@0)·(string))
									if (!ok)
										return [null,false]
								return [fn(__0),true]
						
			msg.Data@"options" = options
			var on of Func<Any, bool>
			if (=?andThen)
				on = (payload:Any -> bool)
					var ok of bool
					var result of string
					if (=?payload)
						[result,ok] = ((payload)·(string))
						if (!ok)
							return false
					andThen(result)
					return true
				
			this.send(msg, (payload:Any -> bool)
				if (fnids·len != 0)
					lock this
						for fnid in fnids
							this.cbOther·del(fnid)
				return ((=!on) || on(payload))
			)


	}


	MessageItem·populateFrom: (payload:Any -> bool)
		var dict of Dict
		var ok of bool
		var val of Any
		[dict,ok] = ((payload)·(Dict))
		if (!ok)
			return false
		[val,ok] = dict@"title"
		if ok
			var title of string
			[title,ok] = ((val)·(string))
			if (!ok)
				return false
			this.Title = title
		else
			return false
		[val,ok] = dict@"isCloseAffordance"
		if ok
			var isCloseAffordance of Nullable<bool>
			[isCloseAffordance,ok] = ((val)·(Nullable<bool>))
			if (!ok)
				return false
			this.IsCloseAffordance = isCloseAffordance
		[val,ok] = dict@"my"
		if ok
			var my of Dict
			[my,ok] = ((val)·(Dict))
			if (!ok)
				return false
			this.My = my
		return true


}
