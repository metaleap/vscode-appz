// DO NOT EDIT: generated by github.com/metaleap/vscode-appz/src/gen/gen-vscext.ts via github.com/metaleap/vscode-appz/src/gen/main.ts

import * as vscode from 'vscode'

import * as ppio from './procspipeio'

type MessageOptions = vscode.MessageOptions
interface MessageItem extends vscode.MessageItem {
	my?: { [_: string]: any }
}
interface InputBoxOptions extends vscode.InputBoxOptions {
	validateInput_AppzFuncId: string
}

export function handle(msg: ppio.IpcMsg, proc: ppio.Proc): Thenable<any> {
	const idxdot = msg.qName.lastIndexOf('.')
	const [apiname, methodname] = (idxdot > 0) ? [msg.qName.slice(0, idxdot), msg.qName.slice(idxdot + 1)] : ['', msg.qName]
	switch (apiname) {
		case "window":
			switch (methodname) {
				case "showErrorMessage1": {
					const arg_message = (msg.data['message']) as string
					const arg_items = (msg.data['items'] || []) as string[]
					return vscode.window.showErrorMessage(arg_message, ...arg_items, )
				}
				case "showErrorMessage2": {
					const arg_message = (msg.data['message']) as string
					const arg_options = (msg.data['options']) as MessageOptions
					const arg_items = (msg.data['items'] || []) as string[]
					return vscode.window.showErrorMessage(arg_message, arg_options, ...arg_items, )
				}
				case "showErrorMessage3": {
					const arg_message = (msg.data['message']) as string
					const arg_items = (msg.data['items'] || []) as MessageItem[]
					return vscode.window.showErrorMessage(arg_message, ...arg_items, )
				}
				case "showErrorMessage4": {
					const arg_message = (msg.data['message']) as string
					const arg_options = (msg.data['options']) as MessageOptions
					const arg_items = (msg.data['items'] || []) as MessageItem[]
					return vscode.window.showErrorMessage(arg_message, arg_options, ...arg_items, )
				}
				case "showInformationMessage1": {
					const arg_message = (msg.data['message']) as string
					const arg_items = (msg.data['items'] || []) as string[]
					return vscode.window.showInformationMessage(arg_message, ...arg_items, )
				}
				case "showInformationMessage2": {
					const arg_message = (msg.data['message']) as string
					const arg_options = (msg.data['options']) as MessageOptions
					const arg_items = (msg.data['items'] || []) as string[]
					return vscode.window.showInformationMessage(arg_message, arg_options, ...arg_items, )
				}
				case "showInformationMessage3": {
					const arg_message = (msg.data['message']) as string
					const arg_items = (msg.data['items'] || []) as MessageItem[]
					return vscode.window.showInformationMessage(arg_message, ...arg_items, )
				}
				case "showInformationMessage4": {
					const arg_message = (msg.data['message']) as string
					const arg_options = (msg.data['options']) as MessageOptions
					const arg_items = (msg.data['items'] || []) as MessageItem[]
					return vscode.window.showInformationMessage(arg_message, arg_options, ...arg_items, )
				}
				case "showWarningMessage1": {
					const arg_message = (msg.data['message']) as string
					const arg_items = (msg.data['items'] || []) as string[]
					return vscode.window.showWarningMessage(arg_message, ...arg_items, )
				}
				case "showWarningMessage2": {
					const arg_message = (msg.data['message']) as string
					const arg_options = (msg.data['options']) as MessageOptions
					const arg_items = (msg.data['items'] || []) as string[]
					return vscode.window.showWarningMessage(arg_message, arg_options, ...arg_items, )
				}
				case "showWarningMessage3": {
					const arg_message = (msg.data['message']) as string
					const arg_items = (msg.data['items'] || []) as MessageItem[]
					return vscode.window.showWarningMessage(arg_message, ...arg_items, )
				}
				case "showWarningMessage4": {
					const arg_message = (msg.data['message']) as string
					const arg_options = (msg.data['options']) as MessageOptions
					const arg_items = (msg.data['items'] || []) as MessageItem[]
					return vscode.window.showWarningMessage(arg_message, arg_options, ...arg_items, )
				}
				case "showInputBox": {
					const arg_options = (msg.data['options']) as InputBoxOptions
					if (arg_options.validateInput_AppzFuncId && arg_options.validateInput_AppzFuncId.length)
						arg_options.validateInput = (a0) => proc.callBack(arg_options.validateInput_AppzFuncId, a0)
					return vscode.window.showInputBox(arg_options, )
				}
				default:
					throw (methodname)
			}
		default:
			throw (apiname)
	}
}

